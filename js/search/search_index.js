var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/Code.html",[0,1.18,1,1.03]],["body/components/Code.html",[0,1.436,1,1.933,2,0.668,3,0.162,4,0.966,5,0.61,6,0.61,7,0.138,8,0.511,9,0.61,10,3.453,11,1.341,12,1.84,13,2.196,14,1.341,15,1.285,16,2.477,17,2.735,18,2.171,19,1.341,20,1.341,21,1.341,22,2.171,23,2.374,24,2.196,25,2.954,26,2.171,27,3.144,28,2.171,29,1.743,30,3.144,31,2.656,32,3.191,33,2.196,34,2.656,35,2.171,36,2.171,37,2.171,38,2.171,39,2.477,40,2.735,41,2.445,42,1.341,43,2.171,44,3.453,45,1.029,46,0.951,47,0.786,48,2.196,49,2.954,50,1.341,51,1.341,52,1.799,53,0.707,54,0.054,55,0.76,56,0.594,57,0.594,58,0.594,59,0.594,60,0.76,61,1.341,62,1.341,63,1.341,64,1.341,65,0.33,66,0.582,67,1.364,68,0.707,69,1.076,70,1.799,71,0.735,72,2.967,73,1.989,74,1.799,75,1.221,76,0.189,77,0.385,78,3.493,79,2.196,80,2.196,81,1.444,82,1.444,83,1.093,84,2.619,85,1.253,86,0.76,87,1.341,88,1.444,89,1.341,90,1.076,91,1.989,92,2.524,93,2.171,94,2.196,95,1.743,96,1.461,97,1.341,98,1.341,99,1.743,100,1.076,101,1.076,102,1.341,103,1.341,104,1.341,105,1.341,106,2.967,107,1.341,108,1.341,109,1.341,110,0.76,111,0.76,112,1.341,113,0.76,114,1.341,115,1.076,116,0.76,117,1.076,118,0.76,119,0.76,120,1.076,121,1.341,122,0.76,123,1.341,124,0.76,125,1.341,126,0.61,127,0.33,128,0.61,129,0.61,130,0.61,131,0.61,132,0.61,133,0.189,134,0.76,135,0.61,136,0.511,137,0.772,138,0.511,139,0.511,140,1.341,141,0.61,142,0.61,143,1.989,144,0.61,145,0.61,146,0.069,147,0.162,148,0.61,149,1.076,150,0.162,151,1.743,152,0.61,153,1.444,154,0.61,155,0.508,156,0.942,157,1.444,158,0.251,159,0.582,160,0.61,161,0.013,162,0.013]],["title/classes/CodeHarness.html",[146,0.14,163,1.83]],["body/classes/CodeHarness.html",[1,1.821,2,2.073,3,0.699,4,0.699,7,0.594,9,2.628,15,1.082,53,0.888,54,0.052,68,0.888,75,1.082,76,0.814,77,1.195,83,1.082,85,1.24,133,0.814,146,0.169,147,0.699,161,0.041,162,0.041,163,2.798,164,1.421,165,3.339,166,1.421,167,4.159,168,4.159,169,4.159,170,2.073,171,3.669,172,2.278,173,2.278,174,2.628,175,1.632,176,1.421,177,3.274]],["title/directives/EmptyState.html",[59,0.898,150,0.581]],["body/directives/EmptyState.html",[3,0.587,4,0.587,7,0.499,45,1.206,46,1.206,47,1.348,53,0.587,54,0.053,56,0.908,57,0.908,58,0.908,59,1.225,65,1.193,66,1.95,67,2.036,68,1.088,71,1.267,127,1.193,146,0.259,147,0.96,150,1.002,156,2.036,158,0.908,159,1.821,161,0.036,162,0.036,178,1.37,179,2.702,180,2.136,181,1.583,182,1.583,183,1.583]],["title/classes/EmptyStateHarness.html",[146,0.14,184,1.355]],["body/classes/EmptyStateHarness.html",[3,0.666,4,0.666,7,0.565,15,1.029,45,0.896,46,0.896,47,1.158,53,0.666,54,0.053,68,1.009,71,1.174,75,1.029,76,0.775,77,1.158,83,1.029,85,1.18,133,0.775,146,0.23,147,0.954,161,0.039,162,0.039,164,1.352,166,1.352,170,2.353,172,2.436,173,2.436,175,1.553,176,1.352,184,2.008,185,2.32,186,3.289,187,3.116,188,1.553]],["title/directives/ErrorState.html",[58,0.898,150,0.581]],["body/directives/ErrorState.html",[3,0.587,4,0.587,7,0.499,45,1.206,46,1.348,47,1.206,53,0.587,54,0.053,56,0.908,57,0.908,58,1.225,59,0.908,65,1.193,66,1.95,67,2.036,68,1.088,71,1.267,127,1.193,146,0.259,147,0.96,150,1.002,156,2.036,158,0.908,159,1.821,161,0.036,162,0.036,178,1.37,179,2.702,180,1.583,181,1.583,182,2.136,183,1.583]],["title/classes/ErrorStateHarness.html",[146,0.14,176,1.18]],["body/classes/ErrorStateHarness.html",[3,0.666,4,0.666,7,0.565,15,1.029,45,0.896,46,1.158,47,0.896,53,0.666,54,0.053,68,1.009,71,1.174,75,1.029,76,0.775,77,1.158,83,1.029,85,1.18,133,0.775,146,0.23,147,0.954,161,0.039,162,0.039,164,1.352,166,1.352,170,2.353,172,2.436,173,2.436,175,1.553,176,1.748,184,1.553,185,2.32,186,3.289,188,1.553,189,2.502]],["title/directives/LoadingState.html",[57,0.898,150,0.581]],["body/directives/LoadingState.html",[3,0.587,4,0.587,7,0.499,45,1.348,46,1.206,47,1.206,53,0.587,54,0.053,56,0.908,57,1.225,58,0.908,59,0.908,65,1.193,66,1.95,67,2.036,68,1.088,71,1.267,127,1.193,146,0.259,147,0.96,150,1.002,156,2.036,158,0.908,159,1.821,161,0.036,162,0.036,178,1.37,179,2.702,180,1.583,181,2.136,182,1.583,183,1.583]],["title/classes/LoadingStateHarness.html",[146,0.14,188,1.355]],["body/classes/LoadingStateHarness.html",[3,0.666,4,0.666,7,0.565,15,1.029,45,1.158,46,0.896,47,0.896,53,0.666,54,0.053,68,1.009,71,1.174,75,1.029,76,0.775,77,1.158,83,1.029,85,1.18,133,0.775,146,0.23,147,0.954,161,0.039,162,0.039,164,1.352,166,1.352,170,2.353,172,2.436,173,2.436,174,2.502,175,1.553,176,1.352,184,1.553,185,2.32,186,3.289,188,2.008]],["title/components/Markdown.html",[0,1.18,155,1.03]],["body/components/Markdown.html",[0,1.122,1,0.468,2,1.012,3,0.264,4,0.552,5,0.991,6,0.991,7,0.224,12,1.366,13,1.63,15,0.989,23,2.26,24,1.63,32,2.655,33,1.63,41,2.164,45,0.583,46,0.86,47,0.583,48,0.991,53,0.707,54,0.054,56,0.408,57,0.408,58,0.408,59,0.408,65,0.536,66,0.881,67,1.703,68,0.869,69,1.63,71,0.307,75,1.241,76,0.307,77,0.583,78,3.81,79,3.017,80,2.855,81,2.075,82,2.075,83,1.241,84,3,85,1.54,90,1.63,91,2.403,92,0.991,94,2.403,95,1.63,96,1.739,99,1.63,100,0.991,101,0.991,106,2.075,115,1.63,117,1.63,120,0.991,126,0.991,127,0.536,128,0.991,129,0.991,130,0.991,131,0.991,132,0.991,133,0.643,135,0.991,137,2.048,139,0.831,143,1.63,144,0.991,145,0.991,146,0.105,147,0.434,148,0.991,149,1.63,150,0.264,151,2.403,152,0.991,153,2.403,154,0.991,155,1.688,156,1.299,157,2.075,158,0.408,159,0.881,160,0.991,161,0.02,162,0.02,190,0.831,191,2.03,192,2.585,193,3.36,194,2.585,195,2.585,196,2.585,197,2.585,198,2.855,199,2.03,200,2.585,201,2.994,202,1.235,203,2.03,204,2.03,205,1.235,206,1.235,207,2.994,208,2.03,209,2.03,210,2.03,211,1.235,212,1.235,213,2.03,214,1.235,215,2.03,216,2.03,217,1.235,218,1.235,219,1.235,220,2.03,221,2.03,222,1.235,223,2.403,224,1.63,225,1.235,226,0.991,227,1.235,228,0.831,229,1.235,230,1.235,231,1.235,232,1.235,233,1.235]],["title/classes/MarkdownHarness.html",[146,0.14,234,1.83]],["body/classes/MarkdownHarness.html",[3,0.599,4,0.599,7,0.509,15,0.926,23,2.165,41,2.609,53,0.599,54,0.053,68,0.803,72,3.637,73,3.018,75,1.401,76,0.698,77,1.08,83,1.401,85,1.606,133,0.698,137,2.609,146,0.145,147,0.599,155,1.423,161,0.037,162,0.037,164,1.217,166,1.217,170,1.873,171,3.404,172,2.113,173,2.113,175,1.398,189,2.251,193,3.018,234,2.529,235,3.637,236,4.24,237,4.24,238,4.53,239,3.759,240,2.804,241,4.53,242,4.53,243,2.804]],["title/directives/OkState.html",[150,0.581,158,0.898]],["body/directives/OkState.html",[3,0.587,4,0.587,7,0.499,45,1.206,46,1.206,47,1.206,53,0.587,54,0.053,56,0.908,57,0.908,58,0.908,59,0.908,65,1.193,66,1.95,67,2.036,68,1.088,71,1.267,127,1.193,146,0.259,147,0.96,150,1.002,156,2.036,158,1.225,159,2.036,161,0.036,162,0.036,178,1.37,179,2.702,180,1.583,181,1.583,182,1.583,183,2.136]],["title/coverage.html",[244,2.956]],["body/coverage.html",[0,1.642,1,1.073,7,0.514,8,2.868,29,2.274,54,0.052,57,0.936,58,0.936,59,0.936,96,1.906,133,0.941,136,1.906,138,1.906,146,0.244,150,0.972,155,1.073,158,0.936,161,0.037,162,0.037,163,1.906,165,2.274,166,2.057,176,1.229,178,2.267,184,1.412,185,2.454,188,1.412,190,2.546,228,1.906,234,1.906,235,2.274,244,2.274,245,2.833,246,2.833,247,2.833,248,2.833,249,3.784,250,5.123,251,4.876,252,3.784,253,2.833,254,4.262,255,2.833,256,2.833,257,2.833,258,2.833,259,2.833,260,2.833,261,2.833,262,2.833]],["title/dependencies.html",[263,1.538,264,2.619]],["body/dependencies.html",[54,0.05,161,0.047,162,0.047,264,3.345,265,4.166,266,4.166]],["title/index.html",[76,0.569,267,2.286,268,2.286]],["body/index.html",[0,2.023,1,1.766,2,2.131,12,2.302,31,2.746,34,3.432,41,1.97,54,0.046,56,1.13,71,0.851,141,2.746,142,2.746,155,1.766,161,0.042,162,0.042,263,2.302,269,3.421,270,3.421,271,3.421,272,3.421,273,3.421,274,3.421,275,3.421,276,3.421,277,3.421,278,4.275,279,3.421,280,3.421,281,4.275,282,3.421,283,4.275,284,3.421,285,3.421,286,3.421,287,3.421,288,3.421,289,3.421,290,3.421,291,3.421]],["title/modules.html",[292,2.956]],["body/modules.html",[54,0.047,161,0.047,162,0.047,292,3.395]],["title/overview.html",[293,2.956]],["body/overview.html",[2,2.046,54,0.047,56,1.356,161,0.047,162,0.047,164,1.781,293,3.296,294,4.105,295,4.105,296,4.105]],["title/properties.html",[77,0.938,263,1.538]],["body/properties.html",[54,0.05,77,1.197,161,0.047,162,0.047,297,4.166,298,4.166]],["title/miscellaneous/typealiases.html",[299,1.316,300,3.263]],["body/miscellaneous/typealiases.html",[54,0.046,76,0.992,133,0.992,155,1.51,161,0.046,162,0.046,190,2.684,198,3.202,223,3.202,224,3.202,226,3.202,228,3.158,299,2.297,301,3.988,302,3.988]],["title/miscellaneous/variables.html",[299,1.316,303,2.619]],["body/miscellaneous/variables.html",[1,1.687,8,2.462,15,1.472,23,2.566,54,0.051,75,1.472,76,0.91,83,1.472,84,2.999,88,2.937,133,1.109,136,2.999,137,2.566,138,2.999,139,2.462,161,0.044,162,0.044,299,2.107,303,2.937,304,4.456]]],"invertedIndex":[["",{"_index":54,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":250,"title":{},"body":{"coverage.html":{}}}],["0.0.0",{"_index":298,"title":{},"body":{"properties.html":{}}}],["0.0.2",{"_index":285,"title":{},"body":{"index.html":{}}}],["0.4.1",{"_index":287,"title":{},"body":{"index.html":{}}}],["0/1",{"_index":251,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":254,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":282,"title":{},"body":{"index.html":{}}}],["1.1.1",{"_index":288,"title":{},"body":{"index.html":{}}}],["1/1",{"_index":259,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":253,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":258,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":294,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":266,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":260,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":279,"title":{},"body":{"index.html":{}}}],["4",{"_index":295,"title":{},"body":{"overview.html":{}}}],["4/10",{"_index":256,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":255,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":296,"title":{},"body":{"overview.html":{}}}],["50",{"_index":252,"title":{},"body":{"coverage.html":{}}}],["6/10",{"_index":248,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":247,"title":{},"body":{"coverage.html":{}}}],["actual_component",{"_index":160,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["alias",{"_index":257,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":301,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular",{"_index":278,"title":{},"body":{"index.html":{}}}],["angular/cdk/testing",{"_index":175,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["angular/common/http",{"_index":129,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["angular/core",{"_index":127,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["angular/platform",{"_index":131,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["async",{"_index":200,"title":{},"body":{"components/Markdown.html":{}}}],["attribute",{"_index":89,"title":{},"body":{"components/Code.html":{}}}],["available",{"_index":64,"title":{},"body":{"components/Code.html":{}}}],["below",{"_index":50,"title":{},"body":{"components/Code.html":{}}}],["block",{"_index":145,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["both",{"_index":139,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"miscellaneous/variables.html":{}}}],["browser",{"_index":132,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["case",{"_index":72,"title":{},"body":{"components/Code.html":{},"classes/MarkdownHarness.html":{}}}],["class",{"_index":146,"title":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["classes",{"_index":164,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{},"overview.html":{}}}],["code",{"_index":1,"title":{"components/Code.html":{}},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"components/Markdown.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["code'},{'name",{"_index":154,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["codeharness",{"_index":163,"title":{"classes/CodeHarness.html":{}},"body":{"classes/CodeHarness.html":{},"coverage.html":{}}}],["common",{"_index":281,"title":{},"body":{"index.html":{}}}],["community",{"_index":291,"title":{},"body":{"index.html":{}}}],["compatible",{"_index":276,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/Code.html":{},"components/Markdown.html":{}},"body":{"components/Code.html":{},"components/Markdown.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":152,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["componentharness",{"_index":186,"title":{},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"components/Markdown.html":{},"index.html":{},"overview.html":{}}}],["computed",{"_index":91,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["const",{"_index":92,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["containing",{"_index":20,"title":{},"body":{"components/Code.html":{}}}],["content",{"_index":41,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"index.html":{}}}],["contentcontainercomponentharness",{"_index":171,"title":{},"body":{"classes/CodeHarness.html":{},"classes/MarkdownHarness.html":{}}}],["coverage",{"_index":244,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["custom",{"_index":35,"title":{},"body":{"components/Code.html":{}}}],["default",{"_index":75,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":85,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{}}}],["dependencies",{"_index":264,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":9,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{}}}],["different",{"_index":43,"title":{},"body":{"components/Code.html":{}}}],["directive",{"_index":150,"title":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["directives",{"_index":56,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"index.html":{},"overview.html":{}}}],["directly",{"_index":16,"title":{},"body":{"components/Code.html":{}}}],["display",{"_index":11,"title":{},"body":{"components/Code.html":{}}}],["displayed",{"_index":21,"title":{},"body":{"components/Code.html":{}}}],["documentation",{"_index":245,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["domsanitizer",{"_index":130,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["element",{"_index":149,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["empty",{"_index":47,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["emptystate",{"_index":59,"title":{"directives/EmptyState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["emptystateharness",{"_index":184,"title":{"classes/EmptyStateHarness.html":{}},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"coverage.html":{}}}],["error",{"_index":46,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["error(error_both",{"_index":98,"title":{},"body":{"components/Code.html":{}}}],["error(error_none",{"_index":97,"title":{},"body":{"components/Code.html":{}}}],["error_both",{"_index":138,"title":{},"body":{"components/Code.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_none",{"_index":136,"title":{},"body":{"components/Code.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errorstate",{"_index":58,"title":{"directives/ErrorState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["errorstateharness",{"_index":176,"title":{"classes/ErrorStateHarness.html":{}},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"coverage.html":{}}}],["example",{"_index":49,"title":{},"body":{"components/Code.html":{}}}],["examples",{"_index":51,"title":{},"body":{"components/Code.html":{}}}],["export",{"_index":147,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["exportas",{"_index":179,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["extends",{"_index":170,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["fetch",{"_index":17,"title":{},"body":{"components/Code.html":{}}}],["fetching",{"_index":62,"title":{},"body":{"components/Code.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["function",{"_index":36,"title":{},"body":{"components/Code.html":{}}}],["gethighlighter",{"_index":134,"title":{},"body":{"components/Code.html":{}}}],["gethighlighter().codetohtml(text",{"_index":102,"title":{},"body":{"components/Code.html":{}}}],["getloaded",{"_index":236,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["getlocal",{"_index":237,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["getting",{"_index":267,"title":{"index.html":{}},"body":{}}],["harness",{"_index":167,"title":{},"body":{"classes/CodeHarness.html":{}}}],["harness.ts",{"_index":166,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{},"coverage.html":{}}}],["harness.ts:12",{"_index":187,"title":{},"body":{"classes/EmptyStateHarness.html":{}}}],["harness.ts:14",{"_index":240,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["harness.ts:4",{"_index":189,"title":{},"body":{"classes/ErrorStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["harness.ts:8",{"_index":174,"title":{},"body":{"classes/CodeHarness.html":{},"classes/LoadingStateHarness.html":{}}}],["harness.ts:9",{"_index":243,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["highlight",{"_index":225,"title":{},"body":{"components/Markdown.html":{}}}],["highlighter",{"_index":34,"title":{},"body":{"components/Code.html":{},"index.html":{}}}],["highlightercore",{"_index":39,"title":{},"body":{"components/Code.html":{}}}],["highlighting",{"_index":13,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["host",{"_index":66,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["hostselector",{"_index":173,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["html",{"_index":143,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["httpresource",{"_index":128,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["httpresource.text",{"_index":115,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["https://marked.js.org/using_advanced#options",{"_index":227,"title":{},"body":{"components/Markdown.html":{}}}],["https://shiki.style/languages",{"_index":114,"title":{},"body":{"components/Code.html":{}}}],["https://shiki.style/themes",{"_index":125,"title":{},"body":{"components/Code.html":{}}}],["identifier",{"_index":29,"title":{},"body":{"components/Code.html":{},"coverage.html":{}}}],["ignored",{"_index":90,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["implements",{"_index":191,"title":{},"body":{"components/Markdown.html":{}}}],["import",{"_index":53,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["importing",{"_index":52,"title":{},"body":{"components/Code.html":{}}}],["index",{"_index":76,"title":{"index.html":{}},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["inject",{"_index":126,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["inject(domsanitizer",{"_index":117,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["input",{"_index":84,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"miscellaneous/variables.html":{}}}],["input(\"github",{"_index":220,"title":{},"body":{"components/Markdown.html":{}}}],["input(\"javascript",{"_index":112,"title":{},"body":{"components/Code.html":{}}}],["input(\"nord",{"_index":123,"title":{},"body":{"components/Code.html":{}}}],["inputs",{"_index":19,"title":{},"body":{"components/Code.html":{}}}],["instance",{"_index":37,"title":{},"body":{"components/Code.html":{}}}],["interacting",{"_index":168,"title":{},"body":{"classes/CodeHarness.html":{}}}],["lang",{"_index":25,"title":{},"body":{"components/Code.html":{}}}],["language",{"_index":27,"title":{},"body":{"components/Code.html":{}}}],["legend",{"_index":148,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["light",{"_index":221,"title":{},"body":{"components/Markdown.html":{}}}],["loaded",{"_index":239,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["loading",{"_index":45,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["loadingstate",{"_index":57,"title":{"directives/LoadingState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["loadingstateharness",{"_index":188,"title":{"classes/LoadingStateHarness.html":{}},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"coverage.html":{}}}],["local",{"_index":73,"title":{},"body":{"components/Code.html":{},"classes/MarkdownHarness.html":{}}}],["made",{"_index":290,"title":{},"body":{"index.html":{}}}],["maerked",{"_index":215,"title":{},"body":{"components/Markdown.html":{}}}],["markdown",{"_index":155,"title":{"components/Markdown.html":{}},"body":{"components/Code.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["markdownharness",{"_index":234,"title":{"classes/MarkdownHarness.html":{}},"body":{"classes/MarkdownHarness.html":{},"coverage.html":{}}}],["markdownoptions",{"_index":228,"title":{},"body":{"components/Markdown.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["marked",{"_index":223,"title":{},"body":{"components/Markdown.html":{},"miscellaneous/typealiases.html":{}}}],["marked(highlight(this.theme",{"_index":231,"title":{},"body":{"components/Markdown.html":{}}}],["marked.parse(text",{"_index":232,"title":{},"body":{"components/Markdown.html":{}}}],["markedoptions",{"_index":224,"title":{},"body":{"components/Markdown.html":{},"miscellaneous/typealiases.html":{}}}],["matching",{"_index":162,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["md",{"_index":193,"title":{},"body":{"components/Markdown.html":{},"classes/MarkdownHarness.html":{}}}],["mdcontent",{"_index":229,"title":{},"body":{"components/Markdown.html":{}}}],["metadata",{"_index":65,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["methods",{"_index":199,"title":{},"body":{"components/Markdown.html":{}}}],["micro",{"_index":271,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":299,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":242,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["modules",{"_index":292,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":153,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["nested",{"_index":40,"title":{},"body":{"components/Code.html":{}}}],["new",{"_index":96,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"coverage.html":{}}}],["ng)angular",{"_index":270,"title":{},"body":{"index.html":{}}}],["ngoninit",{"_index":201,"title":{},"body":{"components/Markdown.html":{}}}],["ok",{"_index":159,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["okstate",{"_index":158,"title":{"directives/OkState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["oninit",{"_index":192,"title":{},"body":{"components/Markdown.html":{}}}],["optional",{"_index":120,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["options",{"_index":198,"title":{},"body":{"components/Markdown.html":{},"miscellaneous/typealiases.html":{}}}],["overview",{"_index":293,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":263,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["packages",{"_index":272,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":206,"title":{},"body":{"components/Markdown.html":{}}}],["parse",{"_index":99,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["parse(code",{"_index":107,"title":{},"body":{"components/Code.html":{}}}],["parse(text",{"_index":204,"title":{},"body":{"components/Markdown.html":{}}}],["parse(this.res.value",{"_index":109,"title":{},"body":{"components/Code.html":{}}}],["parser",{"_index":216,"title":{},"body":{"components/Markdown.html":{}}}],["parsing",{"_index":226,"title":{},"body":{"components/Markdown.html":{},"miscellaneous/typealiases.html":{}}}],["private",{"_index":80,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["programming",{"_index":26,"title":{},"body":{"components/Code.html":{}}}],["projected",{"_index":241,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["properties",{"_index":77,"title":{"properties.html":{}},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"properties.html":{}}}],["protected",{"_index":79,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["provide",{"_index":87,"title":{},"body":{"components/Code.html":{}}}],["provided",{"_index":137,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/variables.html":{}}}],["providing",{"_index":61,"title":{},"body":{"components/Code.html":{}}}],["readonly",{"_index":78,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["reference",{"_index":280,"title":{},"body":{"index.html":{}}}],["registry",{"_index":289,"title":{},"body":{"index.html":{}}}],["remote",{"_index":18,"title":{},"body":{"components/Code.html":{}}}],["rendered",{"_index":213,"title":{},"body":{"components/Markdown.html":{}}}],["res",{"_index":81,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["res.error",{"_index":197,"title":{},"body":{"components/Markdown.html":{}}}],["res.hasvalue",{"_index":194,"title":{},"body":{"components/Markdown.html":{}}}],["res.isloading",{"_index":196,"title":{},"body":{"components/Markdown.html":{}}}],["res.value",{"_index":195,"title":{},"body":{"components/Markdown.html":{}}}],["resolved",{"_index":74,"title":{},"body":{"components/Code.html":{}}}],["results",{"_index":161,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":106,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["returns",{"_index":203,"title":{},"body":{"components/Markdown.html":{}}}],["sanitize",{"_index":82,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["see",{"_index":48,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["selector",{"_index":67,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["set",{"_index":88,"title":{},"body":{"components/Code.html":{},"miscellaneous/variables.html":{}}}],["shiki",{"_index":31,"title":{},"body":{"components/Code.html":{},"index.html":{}}}],["shiki's",{"_index":38,"title":{},"body":{"components/Code.html":{}}}],["simple",{"_index":274,"title":{},"body":{"index.html":{}}}],["smart",{"_index":275,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["src",{"_index":23,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":268,"title":{"index.html":{}},"body":{}}],["state",{"_index":71,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"index.html":{}}}],["state,[xpr",{"_index":156,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["state]'},{'name",{"_index":157,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["statements",{"_index":246,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":44,"title":{},"body":{"components/Code.html":{}}}],["static",{"_index":172,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["string",{"_index":15,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/variables.html":{}}}],["style.display",{"_index":144,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["supported",{"_index":30,"title":{},"body":{"components/Code.html":{}}}],["supports",{"_index":42,"title":{},"body":{"components/Code.html":{}}}],["switch",{"_index":70,"title":{},"body":{"components/Code.html":{}}}],["syntax",{"_index":12,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"index.html":{}}}],["table",{"_index":262,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":261,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":14,"title":{},"body":{"components/Code.html":{}}}],["template",{"_index":69,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["tests",{"_index":169,"title":{},"body":{"classes/CodeHarness.html":{}}}],["text",{"_index":100,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["theme",{"_index":32,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["this.code",{"_index":93,"title":{},"body":{"components/Code.html":{}}}],["this.content(this.md",{"_index":230,"title":{},"body":{"components/Markdown.html":{}}}],["this.lang",{"_index":103,"title":{},"body":{"components/Code.html":{}}}],["this.locatorforoptional(\".xpr",{"_index":238,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["this.md",{"_index":207,"title":{},"body":{"components/Markdown.html":{}}}],["this.options",{"_index":233,"title":{},"body":{"components/Markdown.html":{}}}],["this.parse(this.md",{"_index":208,"title":{},"body":{"components/Markdown.html":{}}}],["this.parse(this.res.hasvalue",{"_index":209,"title":{},"body":{"components/Markdown.html":{}}}],["this.res.hasvalue",{"_index":108,"title":{},"body":{"components/Code.html":{}}}],["this.res.status",{"_index":121,"title":{},"body":{"components/Code.html":{}}}],["this.res.value",{"_index":210,"title":{},"body":{"components/Markdown.html":{}}}],["this.sanitize.bypasssecuritytrusthtml",{"_index":101,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["this.src",{"_index":94,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["this.theme",{"_index":104,"title":{},"body":{"components/Code.html":{}}}],["throw",{"_index":95,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["tostring",{"_index":105,"title":{},"body":{"components/Code.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["tslib",{"_index":265,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":133,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":300,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":140,"title":{},"body":{"components/Code.html":{}}}],["unable",{"_index":22,"title":{},"body":{"components/Code.html":{}}}],["url",{"_index":24,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["use",{"_index":33,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["used",{"_index":10,"title":{},"body":{"components/Code.html":{}}}],["using",{"_index":63,"title":{},"body":{"components/Code.html":{}}}],["valid",{"_index":28,"title":{},"body":{"components/Code.html":{}}}],["value",{"_index":83,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":151,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["variable",{"_index":249,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":303,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vendor",{"_index":283,"title":{},"body":{"index.html":{}}}],["version",{"_index":297,"title":{},"body":{"properties.html":{}}}],["very",{"_index":273,"title":{},"body":{"index.html":{}}}],["xp)experimental",{"_index":269,"title":{},"body":{"index.html":{}}}],["xpr",{"_index":68,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["xpremptystate",{"_index":180,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["xprerrorstate",{"_index":182,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["xprloadingstate",{"_index":181,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["xprng/.../code.ts",{"_index":304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xprng/.../markdown.ts",{"_index":302,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["xprng/code",{"_index":141,"title":{},"body":{"components/Code.html":{},"index.html":{}}}],["xprng/code\";importing",{"_index":55,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts",{"_index":8,"title":{},"body":{"components/Code.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["xprng/code/src/code.ts:101",{"_index":86,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:108",{"_index":119,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:116",{"_index":113,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:124",{"_index":124,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:130",{"_index":111,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:134",{"_index":122,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:140",{"_index":110,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:168",{"_index":116,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:169",{"_index":118,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/testing/code",{"_index":165,"title":{},"body":{"classes/CodeHarness.html":{},"coverage.html":{}}}],["xprng/common",{"_index":142,"title":{},"body":{"components/Code.html":{},"index.html":{}}}],["xprng/common\";directly",{"_index":60,"title":{},"body":{"components/Code.html":{}}}],["xprng/common/src/states.ts",{"_index":178,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["xprng/common/testing",{"_index":177,"title":{},"body":{"classes/CodeHarness.html":{}}}],["xprng/common/testing/state",{"_index":185,"title":{},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"coverage.html":{}}}],["xprng/markdown",{"_index":286,"title":{},"body":{"index.html":{}}}],["xprng/markdown/src/markdown.ts",{"_index":190,"title":{},"body":{"components/Markdown.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["xprng/markdown/src/markdown.ts:47",{"_index":212,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:54",{"_index":219,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:60",{"_index":222,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:66",{"_index":214,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:71",{"_index":211,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:77",{"_index":205,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:84",{"_index":217,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:85",{"_index":218,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:87",{"_index":202,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/testing/markdown",{"_index":235,"title":{},"body":{"classes/MarkdownHarness.html":{},"coverage.html":{}}}],["xprng/vendor",{"_index":284,"title":{},"body":{"index.html":{}}}],["xprng/vendor/shiki",{"_index":135,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["xprokstate",{"_index":183,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["zoneless",{"_index":277,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/Code.html":{"url":"components/Code.html","title":"component - Code","body":"\n                   \n\n\n\n\n\n  Components\n  \n  Code\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    xprng/code/src/code.ts\n\n\n\n    \n        Description\n    \n    \n        Code\nThis component is used to display source code with syntax highlighting.\nIt can either take a string of code directly or fetch it from a remote source.\nInputs\n\ncode: A string containing the source code to be displayed. Unable to be used with src.\nsrc: A URL from which to fetch the source code. Unable to be used with code.\nlang: The programming language of the source code. This should be a valid language identifier supported by Shiki.\ntheme: The theme to use for syntax highlighting. This can be any theme supported by Shiki.\nhighlighter: A custom highlighter function (Should be an instance of Shiki's HighlighterCore).\n\nNested Content\nThe component supports nested content for different states, loading, error, and empty states.\nSee the example below for how to use these states.\nExamples\nImporting the component\nExample :import { Code } from \"@xprng/code\";Importing states directives\nExample :import { LoadingState, ErrorState, EmptyState } from \"@xprng/common\";Directly providing code content\nExample :Fetching code from a remote source\nExample :Using nested content for different states\nExample :\n  Loading...\n  Error loading code.\n  No code available.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                xpr-code\n            \n\n\n\n\n\n            \n                template\n                @switch (state()) {\n  @case (\"local\") {\n    \n  }\n  @case (\"error\") {\n    \n  }\n  @case (\"loading\") {\n    \n  }\n  @case (\"resolved\") {\n    \n  }\n  @default {\n    \n  }\n}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                code\n                            \n                            \n                                    Protected\n                                content\n                            \n                            \n                                    Readonly\n                                highlighter\n                            \n                            \n                                    Readonly\n                                lang\n                            \n                            \n                                    Private\n                                    Readonly\n                                res\n                            \n                            \n                                    Private\n                                    Readonly\n                                sanitize\n                            \n                            \n                                    Readonly\n                                src\n                            \n                            \n                                    Protected\n                                state\n                            \n                            \n                                    Readonly\n                                theme\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:101\n                        \n                    \n\n            \n                \n                    Source code content as a string\nThis can be used to directly provide source code content.\nIf this is set, the src attribute will be ignored.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => {\n    const code = this.code() as string;\n    const src = this.src() as string;\n\n    if (!code && !src) {\n      throw new Error(ERROR_NONE);\n    }\n    if (code && src) {\n      throw new Error(ERROR_BOTH);\n    }\n\n    const parse = (text: string) =>\n      this.sanitize.bypassSecurityTrustHtml(\n        getHighlighter().codeToHtml(text, {\n          lang: this.lang(),\n          theme: this.theme(),\n        }).toString(),\n      );\n\n    if (code) return parse(code as string);\n\n    if (this.res.hasValue()) {\n      return parse(this.res.value());\n    }\n\n    return parse(\"\");\n  })\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:140\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        highlighter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:130\n                        \n                    \n\n            \n                \n                    A custom highlighter function (Should be an instance of Shiki's HighlighterCore).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        lang\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(\"javascript\")\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:116\n                        \n                    \n\n            \n                \n                    The programming language of the source code.\nThis should be a valid language identifier supported by Shiki.\nSee https://shiki.style/languages\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        res\n                        \n                    \n                \n            \n                \n                    \n                        Default value : httpResource.text(() => this.src())\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:168\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sanitize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DomSanitizer)\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        src\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:108\n                        \n                    \n\n            \n                \n                    The source URL of the source code content.\nThis is optional and can be used to fetch source code content from a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => {\n    if (this.code()) return \"local\";\n    if (this.src()) return this.res.status();\n    return \"empty\";\n  })\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        theme\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(\"nord\")\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:124\n                        \n                    \n\n            \n                \n                    The theme to use for syntax highlighting.\nThis can be any theme supported by Shiki.\nSee https://shiki.style/themes\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {Component, computed, inject, input} from \"@angular/core\";\nimport {httpResource} from \"@angular/common/http\";\nimport {DomSanitizer} from \"@angular/platform-browser\";\nimport type {HighlighterCore} from \"shiki\";\nimport {getHighlighter} from \"@xprng/vendor/shiki\";\n\nconst ERROR_NONE =\n  \"Either 'code' or 'src' input must be provided. Neither is set.\";\nconst ERROR_BOTH =\n  \"Either 'code' or 'src' input should be provided, not both.\";\n\n/**\n * # Code\n *\n * This component is used to display source code with syntax highlighting.\n * It can either take a string of code directly or fetch it from a remote source.\n *\n * ## Inputs\n *\n * - `code`: A string containing the source code to be displayed. Unable to be used with `src`.\n * - `src`: A URL from which to fetch the source code. Unable to be used with `code`.\n * - `lang`: The programming language of the source code. This should be a valid language identifier supported by Shiki.\n * - `theme`: The theme to use for syntax highlighting. This can be any theme supported by Shiki.\n * - `highlighter`: A custom highlighter function (Should be an instance of Shiki's `HighlighterCore`).\n *\n * ## Nested Content\n *\n * The component supports nested content for different states, loading, error, and empty states.\n * See the example below for how to use these states.\n *\n * ## Examples\n *\n * ### Importing the component\n *\n * ```typescript\n * import { Code } from \"@xprng/code\";\n * ```\n *\n * ### Importing states directives\n *\n * ```typescript\n * import { LoadingState, ErrorState, EmptyState } from \"@xprng/common\";\n * ```\n *\n * ### Directly providing code content\n *\n * ```html\n * \n * ```\n *\n * ### Fetching code from a remote source\n *\n * ```html\n * \n * ```\n *\n * ### Using nested content for different states\n * ```html\n * \n *   Loading...\n *   Error loading code.\n *   No code available.\n * \n * ```\n */\n@Component({\n  selector: \"xpr-code\",\n  host: {\n    \"[style.display]\": '\"block\"',\n    class: \"xpr-code\",\n  },\n  template: `\n    @switch (state()) {\n      @case (\"local\") {\n        \n      }\n      @case (\"error\") {\n        \n      }\n      @case (\"loading\") {\n        \n      }\n      @case (\"resolved\") {\n        \n      }\n      @default {\n        \n      }\n    }\n  `,\n})\nexport class Code {\n  /**\n   * Source code content as a string\n   * This can be used to directly provide source code content.\n   * If this is set, the `src` attribute will be ignored.\n   * @input\n   */\n  readonly code = input();\n\n  /**\n   * The source URL of the source code content.\n   * This is optional and can be used to fetch source code content from a URL.\n   * @input\n   */\n  readonly src = input();\n\n  /**\n   * The programming language of the source code.\n   * This should be a valid language identifier supported by Shiki.\n   * @see https://shiki.style/languages\n   * @input\n   */\n  readonly lang = input(\"javascript\");\n\n  /**\n   * The theme to use for syntax highlighting.\n   * This can be any theme supported by Shiki.\n   * @see https://shiki.style/themes\n   * @input\n   */\n  readonly theme = input(\"nord\");\n\n  /**\n   * A custom highlighter function (Should be an instance of Shiki's `HighlighterCore`).\n   * @input\n   */\n  readonly highlighter = input();\n\n  //\n\n  protected state = computed(() => {\n    if (this.code()) return \"local\";\n    if (this.src()) return this.res.status();\n    return \"empty\";\n  });\n\n  protected content = computed(() => {\n    const code = this.code() as string;\n    const src = this.src() as string;\n\n    if (!code && !src) {\n      throw new Error(ERROR_NONE);\n    }\n    if (code && src) {\n      throw new Error(ERROR_BOTH);\n    }\n\n    const parse = (text: string) =>\n      this.sanitize.bypassSecurityTrustHtml(\n        getHighlighter().codeToHtml(text, {\n          lang: this.lang(),\n          theme: this.theme(),\n        }).toString(),\n      );\n\n    if (code) return parse(code as string);\n\n    if (this.res.hasValue()) {\n      return parse(this.res.value());\n    }\n\n    return parse(\"\");\n  });\n\n  private readonly res = httpResource.text(() => this.src());\n  private readonly sanitize = inject(DomSanitizer);\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@switch (state()) {  @case (\"local\") {      }  @case (\"error\") {      }  @case (\"loading\") {      }  @case (\"resolved\") {      }  @default {      }}'\n    var COMPONENTS = [{'name': 'Code', 'selector': 'xpr-code'},{'name': 'Markdown', 'selector': 'xpr-markdown'}];\n    var DIRECTIVES = [{'name': 'EmptyState', 'selector': 'xpr-empty-state,[xpr-empty-state]'},{'name': 'ErrorState', 'selector': 'xpr-error-state,[xpr-error-state]'},{'name': 'LoadingState', 'selector': 'xpr-loading-state,[xpr-loading-state]'},{'name': 'OkState', 'selector': 'xpr-ok-state,[xpr-ok-state]'}];\n    var ACTUAL_COMPONENT = {'name': 'Code'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CodeHarness.html":{"url":"classes/CodeHarness.html","title":"class - CodeHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CodeHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/code/testing/code-harness.ts\n        \n\n\n            \n                Description\n            \n            \n                Harness for interacting with Code components in tests.\n\n            \n\n            \n                Extends\n            \n            \n                        ContentContainerComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-code\"\n                    \n                \n                    \n                        \n                                Defined in xprng/code/testing/code-harness.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {ContentContainerComponentHarness} from \"@angular/cdk/testing\";\nimport {ErrorStateHarness} from '@xprng/common/testing';\n\n/**\n * Harness for interacting with `Code` components in tests.\n */\nexport class CodeHarness extends ContentContainerComponentHarness {\n  static hostSelector = \"xpr-code\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/EmptyState.html":{"url":"directives/EmptyState.html","title":"directive - EmptyState","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  EmptyState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/src/states.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        xpr-empty-state,[xpr-empty-state]\n                    \n\n\n\n                    \n                        exportAs\n                        xprEmptyState\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"xpr-loading-state,[xpr-loading-state]\",\n  exportAs: \"xprLoadingState\",\n  host: {\n    class: \"xpr-loading-state\",\n  },\n})\nexport class LoadingState {\n}\n\n@Directive({\n  selector: \"xpr-error-state,[xpr-error-state]\",\n  exportAs: \"xprErrorState\",\n  host: {\n    class: \"xpr-error-state\",\n  },\n})\nexport class ErrorState {\n}\n\n@Directive({\n  selector: \"xpr-ok-state,[xpr-ok-state]\",\n  exportAs: \"xprOkState\",\n  host: {\n    class: \"xpr-ok-state\",\n  },\n})\nexport class OkState {\n}\n\n@Directive({\n  selector: \"xpr-empty-state,[xpr-empty-state]\",\n  exportAs: \"xprEmptyState\",\n  host: {\n    class: \"xpr-empty-state\",\n  },\n})\nexport class EmptyState {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmptyStateHarness.html":{"url":"classes/EmptyStateHarness.html","title":"class - EmptyStateHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmptyStateHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/testing/state-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-empty-state\"\n                    \n                \n                    \n                        \n                                Defined in xprng/common/testing/state-harness.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentHarness } from \"@angular/cdk/testing\";\n\nexport class ErrorStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-error-state\";\n}\n\nexport class LoadingStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-loading-state\";\n}\n\nexport class EmptyStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-empty-state\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ErrorState.html":{"url":"directives/ErrorState.html","title":"directive - ErrorState","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  ErrorState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/src/states.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        xpr-error-state,[xpr-error-state]\n                    \n\n\n\n                    \n                        exportAs\n                        xprErrorState\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"xpr-loading-state,[xpr-loading-state]\",\n  exportAs: \"xprLoadingState\",\n  host: {\n    class: \"xpr-loading-state\",\n  },\n})\nexport class LoadingState {\n}\n\n@Directive({\n  selector: \"xpr-error-state,[xpr-error-state]\",\n  exportAs: \"xprErrorState\",\n  host: {\n    class: \"xpr-error-state\",\n  },\n})\nexport class ErrorState {\n}\n\n@Directive({\n  selector: \"xpr-ok-state,[xpr-ok-state]\",\n  exportAs: \"xprOkState\",\n  host: {\n    class: \"xpr-ok-state\",\n  },\n})\nexport class OkState {\n}\n\n@Directive({\n  selector: \"xpr-empty-state,[xpr-empty-state]\",\n  exportAs: \"xprEmptyState\",\n  host: {\n    class: \"xpr-empty-state\",\n  },\n})\nexport class EmptyState {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorStateHarness.html":{"url":"classes/ErrorStateHarness.html","title":"class - ErrorStateHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorStateHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/testing/state-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-error-state\"\n                    \n                \n                    \n                        \n                                Defined in xprng/common/testing/state-harness.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentHarness } from \"@angular/cdk/testing\";\n\nexport class ErrorStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-error-state\";\n}\n\nexport class LoadingStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-loading-state\";\n}\n\nexport class EmptyStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-empty-state\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/LoadingState.html":{"url":"directives/LoadingState.html","title":"directive - LoadingState","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  LoadingState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/src/states.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        xpr-loading-state,[xpr-loading-state]\n                    \n\n\n\n                    \n                        exportAs\n                        xprLoadingState\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"xpr-loading-state,[xpr-loading-state]\",\n  exportAs: \"xprLoadingState\",\n  host: {\n    class: \"xpr-loading-state\",\n  },\n})\nexport class LoadingState {\n}\n\n@Directive({\n  selector: \"xpr-error-state,[xpr-error-state]\",\n  exportAs: \"xprErrorState\",\n  host: {\n    class: \"xpr-error-state\",\n  },\n})\nexport class ErrorState {\n}\n\n@Directive({\n  selector: \"xpr-ok-state,[xpr-ok-state]\",\n  exportAs: \"xprOkState\",\n  host: {\n    class: \"xpr-ok-state\",\n  },\n})\nexport class OkState {\n}\n\n@Directive({\n  selector: \"xpr-empty-state,[xpr-empty-state]\",\n  exportAs: \"xprEmptyState\",\n  host: {\n    class: \"xpr-empty-state\",\n  },\n})\nexport class EmptyState {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingStateHarness.html":{"url":"classes/LoadingStateHarness.html","title":"class - LoadingStateHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingStateHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/testing/state-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-loading-state\"\n                    \n                \n                    \n                        \n                                Defined in xprng/common/testing/state-harness.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentHarness } from \"@angular/cdk/testing\";\n\nexport class ErrorStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-error-state\";\n}\n\nexport class LoadingStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-loading-state\";\n}\n\nexport class EmptyStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-empty-state\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Markdown.html":{"url":"components/Markdown.html","title":"component - Markdown","body":"\n                   \n\n\n\n\n\n  Components\n  \n  Markdown\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    xprng/markdown/src/markdown.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                xpr-markdown\n            \n\n\n\n\n\n            \n                template\n                @if (md()) {\n  \n  \n\n} @else if (src()) {\n  \n  @if (res.hasValue() && res.value()) {\n    \n  } @else if (res.isLoading()) {\n    \n  } @else if (res.error()) {\n    \n  } @else {\n    \n  }\n}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                content\n                            \n                            \n                                    Readonly\n                                md\n                            \n                            \n                                    Readonly\n                                options\n                            \n                            \n                                    Protected\n                                    Readonly\n                                res\n                            \n                            \n                                    Private\n                                    Readonly\n                                sanitize\n                            \n                            \n                                    Readonly\n                                src\n                            \n                            \n                                    Readonly\n                                theme\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ngOnInit\n                            \n                            \n                                    Private\n                                parse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in xprng/markdown/src/markdown.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parse\n                        \n                    \n                \n            \n            \n                \n                        \n                    parse(text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in xprng/markdown/src/markdown.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => {\n    return this.md()\n      ? this.parse(this.md()!)\n      : this.parse(this.res.hasValue() ? this.res.value() : \"\");\n  })\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        md\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:47\n                        \n                    \n\n            \n                \n                    The markdown content to be rendered.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input>({})\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:66\n                        \n                    \n\n            \n                \n                    Options for the Maerked parser\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        res\n                        \n                    \n                \n            \n                \n                    \n                        Default value : httpResource.text(() => this.src())\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sanitize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DomSanitizer)\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        src\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:54\n                        \n                    \n\n            \n                \n                    The source URL of the markdown content.\nIf md is provided, this will be ignored.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        theme\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(\"github-light\")\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:60\n                        \n                    \n\n            \n                \n                    The theme to use for syntax highlighting.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, computed, inject, input, OnInit } from \"@angular/core\";\nimport { httpResource } from \"@angular/common/http\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { Marked, type MarkedOptions } from \"marked\";\nimport { highlight } from \"@xprng/vendor/shiki\";\n\n/**\n * Marked options for parsing markdown.\n * @see https://marked.js.org/using_advanced#options\n */\nexport type MarkdownOptions = MarkedOptions;\n\n@Component({\n  selector: \"xpr-markdown\",\n  host: {\n    \"[style.display]\": '\"block\"',\n    class: \"xpr-markdown\",\n  },\n  template: `\n    @if (md()) {\n      \n      \n\n    } @else if (src()) {\n      \n      @if (res.hasValue() && res.value()) {\n        \n      } @else if (res.isLoading()) {\n        \n      } @else if (res.error()) {\n        \n      } @else {\n        \n      }\n    }\n  `,\n})\nexport class Markdown implements OnInit {\n  /**\n   * The markdown content to be rendered.\n   * @input\n   */\n  readonly md = input();\n\n  /**\n   * The source URL of the markdown content.\n   * If `md` is provided, this will be ignored.\n   * @input\n   */\n  readonly src = input();\n\n  /**\n   * The theme to use for syntax highlighting.\n   * @input\n   */\n  readonly theme = input(\"github-light\");\n\n  /**\n   * Options for the Maerked parser\n   * @input\n   */\n  readonly options = input>({});\n\n  //\n\n  // protected mdContent = computed(() => this.content(this.md() ?? \"\"));\n  protected content = computed(() => {\n    return this.md()\n      ? this.parse(this.md()!)\n      : this.parse(this.res.hasValue() ? this.res.value() : \"\");\n  });\n\n  private parse(text: string) {\n    const marked = new Marked(highlight(this.theme()));\n    return this.sanitize.bypassSecurityTrustHtml(\n      marked.parse(text, this.options()) as string,\n    );\n  }\n\n  protected readonly res = httpResource.text(() => this.src());\n  private readonly sanitize = inject(DomSanitizer);\n\n  async ngOnInit() {\n    if (!this.md() && !this.src()) {\n      throw new Error(\n        \"Either 'md' or 'src' input must be provided. Neither provided.\",\n      );\n    }\n    if (this.md() && this.src()) {\n      throw new Error(\n        \"Either 'md' or 'src' input must be provided. Both provided.\",\n      );\n    }\n  }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (md()) {    } @else if (src()) {    @if (res.hasValue() && res.value()) {      } @else if (res.isLoading()) {      } @else if (res.error()) {      } @else {      }}'\n    var COMPONENTS = [{'name': 'Code', 'selector': 'xpr-code'},{'name': 'Markdown', 'selector': 'xpr-markdown'}];\n    var DIRECTIVES = [{'name': 'EmptyState', 'selector': 'xpr-empty-state,[xpr-empty-state]'},{'name': 'ErrorState', 'selector': 'xpr-error-state,[xpr-error-state]'},{'name': 'LoadingState', 'selector': 'xpr-loading-state,[xpr-loading-state]'},{'name': 'OkState', 'selector': 'xpr-ok-state,[xpr-ok-state]'}];\n    var ACTUAL_COMPONENT = {'name': 'Markdown'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MarkdownHarness.html":{"url":"classes/MarkdownHarness.html","title":"class - MarkdownHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MarkdownHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/markdown/testing/markdown-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ContentContainerComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getLoaded\n                            \n                            \n                                getLocal\n                            \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        getLoaded\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.locatorForOptional(\".xpr-loaded\")\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/testing/markdown-harness.ts:14\n                        \n                    \n\n            \n                \n                    The content projected in case of \"src\" provided mode.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLocal\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.locatorForOptional(\".xpr-local\")\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/testing/markdown-harness.ts:9\n                        \n                    \n\n            \n                \n                    The content projected in case of \"md\" provided mode.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-markdown\"\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/testing/markdown-harness.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ContentContainerComponentHarness } from \"@angular/cdk/testing\";\n\nexport class MarkdownHarness extends ContentContainerComponentHarness {\n  static hostSelector = \"xpr-markdown\";\n\n  /**\n   * The content projected in case of \"md\" provided mode.\n   */\n  getLocal = this.locatorForOptional(\".xpr-local\");\n\n  /**\n   * The content projected in case of \"src\" provided mode.\n   */\n  getLoaded = this.locatorForOptional(\".xpr-loaded\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/OkState.html":{"url":"directives/OkState.html","title":"directive - OkState","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  OkState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/src/states.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        xpr-ok-state,[xpr-ok-state]\n                    \n\n\n\n                    \n                        exportAs\n                        xprOkState\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"xpr-loading-state,[xpr-loading-state]\",\n  exportAs: \"xprLoadingState\",\n  host: {\n    class: \"xpr-loading-state\",\n  },\n})\nexport class LoadingState {\n}\n\n@Directive({\n  selector: \"xpr-error-state,[xpr-error-state]\",\n  exportAs: \"xprErrorState\",\n  host: {\n    class: \"xpr-error-state\",\n  },\n})\nexport class ErrorState {\n}\n\n@Directive({\n  selector: \"xpr-ok-state,[xpr-ok-state]\",\n  exportAs: \"xprOkState\",\n  host: {\n    class: \"xpr-ok-state\",\n  },\n})\nexport class OkState {\n}\n\n@Directive({\n  selector: \"xpr-empty-state,[xpr-empty-state]\",\n  exportAs: \"xprEmptyState\",\n  host: {\n    class: \"xpr-empty-state\",\n  },\n})\nexport class EmptyState {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                xprng/code/src/code.ts\n            \n            component\n            Code\n            \n                60 %\n                (6/10)\n            \n        \n        \n            \n                \n                        xprng/code/src/code.ts\n            \n            variable\n            ERROR_BOTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        xprng/code/src/code.ts\n            \n            variable\n            ERROR_NONE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/code/testing/code-harness.ts\n            \n            class\n            CodeHarness\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                xprng/common/src/states.ts\n            \n            directive\n            EmptyState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/common/src/states.ts\n            \n            directive\n            ErrorState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/common/src/states.ts\n            \n            directive\n            LoadingState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/common/src/states.ts\n            \n            directive\n            OkState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/common/testing/state-harness.ts\n            \n            class\n            EmptyStateHarness\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                xprng/common/testing/state-harness.ts\n            \n            class\n            ErrorStateHarness\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                xprng/common/testing/state-harness.ts\n            \n            class\n            LoadingStateHarness\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                xprng/markdown/src/markdown.ts\n            \n            component\n            Markdown\n            \n                40 %\n                (4/10)\n            \n        \n        \n            \n                \n                        xprng/markdown/src/markdown.ts\n            \n            type alias\n            MarkdownOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                xprng/markdown/testing/markdown-harness.ts\n            \n            class\n            MarkdownHarness\n            \n                50 %\n                (2/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n(XP)Experimental (NG)Angular Components\nMicro packages of very simple, yet, smart components.\n\nCompatible with Zoneless Angular 20+.\n\n\n\nComponent\nPackage\nReference\n\n\n\n\nCommon\n@xprng/common\n1.0.0\n\n\nVendor\n@xprng/vendor\n0.0.2\n\n\nMarkdown\n@xprng/markdown\n0.4.1\n\n\nCode\n@xprng/code\n1.1.1\n\n\n\nContent\n\nCommon\nState directives\n\n\nVendor\nShiki syntax highlighter registry\n\n\nMarkdown\nMarkdown component\n\n\nCode\nCode highlighter component\n\n\n\n\nMade with ❤️ for the Angular community.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MarkdownOptions   (xprng/.../markdown.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    xprng/markdown/src/markdown.ts\n    \n    \n        \n            \n                \n                    \n                    MarkdownOptions\n                \n            \n            \n                \n                    Marked options for parsing markdown.\n\n                \n            \n            \n                \n                        MarkedOptions\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ERROR_BOTH   (xprng/.../code.ts)\n                        \n                        \n                            ERROR_NONE   (xprng/.../code.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    xprng/code/src/code.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ERROR_BOTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Either 'code' or 'src' input should be provided, not both.\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_NONE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Either 'code' or 'src' input must be provided. Neither is set.\"\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
