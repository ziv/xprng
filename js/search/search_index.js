var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/Code.html",[0,1.118,1,1.118]],["body/components/Code.html",[0,0.92,1,2.01,2,0.947,3,0.194,4,0.811,5,0.783,6,0.783,7,0.162,8,0.783,9,1.333,10,1.739,11,0.414,12,0.705,13,0.057,14,1.487,15,0.726,16,1.333,17,2.533,18,2.177,19,2.177,20,2.932,21,0.786,22,0.786,23,2.177,24,1.433,25,0.268,26,0.455,27,3.647,28,2.503,29,2.328,30,2.301,31,2.569,32,1.739,33,2.503,34,1.739,35,2.812,36,1.333,37,2.052,38,1.333,39,1.392,40,0.981,41,1.333,42,0.981,43,1.333,44,1.055,45,0.981,46,0.783,47,2.052,48,0.455,49,1.739,50,0.783,51,1.289,52,3.341,53,0.981,54,2.569,55,1.668,56,1.668,57,1.668,58,1.668,59,1.333,60,1.739,61,2.569,62,2.671,63,1.668,64,2.503,65,1.333,66,1.333,67,1.668,68,0.981,69,0.981,70,1.712,71,1.668,72,1.668,73,1.668,74,1.112,75,1.668,76,0.981,77,1.668,78,2.569,79,1.668,80,1.333,81,2.569,82,2.301,83,2.052,84,1.668,85,1.333,86,0.981,87,1.333,88,0.981,89,0.981,90,2.052,91,1.668,92,1.668,93,0.981,94,1.333,95,1.112,96,1.333,97,1.668,98,0.57,99,0.783,100,0.414,101,0.783,102,0.783,103,0.783,104,0.783,105,0.783,106,0.981,107,0.981,108,0.783,109,0.783,110,0.783,111,0.054,112,0.194,113,0.783,114,0.981,115,0.981,116,0.981,117,0.981,118,0.783,119,0.653,120,0.981,121,1.112,122,0.981,123,0.783,124,0.783,125,1.333,126,1.333,127,0.194,128,2.052,129,0.783,130,0.783,131,0.611,132,0.311,133,0.311,134,0.455,135,1.086,136,1.739,137,0.311,138,0.311,139,0.311,140,0.705,141,0.229,142,0.783,143,0.018,144,0.018]],["title/classes/CodeHarness.html",[111,0.086,145,1.764]],["body/classes/CodeHarness.html",[1,1.635,3,0.586,4,0.586,7,0.488,13,0.055,15,0.765,24,1.579,25,0.809,26,1.057,39,1.579,44,1.084,48,0.809,51,1.579,98,0.586,111,0.096,112,0.586,143,0.041,144,0.041,145,2.579,146,1.251,147,3.653,148,1.251,149,1.89,150,3.445,151,4.312,152,4.312,153,2.105,154,2.105,155,3.653,156,2.579,157,2.962,158,3.092,159,2.962,160,1.973,161,1.446]],["title/directives/EmptyState.html",[127,0.524,133,0.839]],["body/directives/EmptyState.html",[3,0.512,4,0.512,7,0.427,11,1.094,12,1.831,13,0.056,14,1.916,15,0.979,21,1.101,22,1.101,98,0.512,100,1.094,111,0.158,112,0.857,127,0.897,132,0.821,133,1.121,134,1.238,135,1.916,137,0.821,138,0.821,139,0.821,140,1.703,141,1.156,143,0.037,144,0.037,162,1.265,163,2.574,164,2.008,165,1.469,166,1.469,167,1.469]],["title/classes/EmptyStateHarness.html",[111,0.086,168,1.293]],["body/classes/EmptyStateHarness.html",[3,0.586,4,0.586,7,0.488,13,0.055,15,0.904,21,0.809,22,0.809,24,1.084,25,0.809,26,1.057,39,1.084,44,1.084,48,0.809,51,1.084,98,0.586,111,0.14,112,0.853,134,1.057,141,1.068,143,0.041,144,0.041,146,1.251,148,1.251,149,2.233,153,2.317,154,2.317,161,1.446,168,1.89,169,2.196,170,3.161,171,2.962,172,1.446,173,1.446]],["title/directives/ErrorState.html",[127,0.524,137,0.839]],["body/directives/ErrorState.html",[3,0.512,4,0.512,7,0.427,11,1.094,12,1.831,13,0.056,14,1.916,15,0.979,21,1.238,22,1.101,98,0.512,100,1.094,111,0.158,112,0.857,127,0.897,132,0.821,133,0.821,134,1.101,135,1.916,137,1.121,138,0.821,139,0.821,140,1.703,141,1.156,143,0.037,144,0.037,162,1.265,163,2.574,164,1.469,165,1.469,166,2.008,167,1.469]],["title/classes/ErrorStateHarness.html",[111,0.086,172,1.293]],["body/classes/ErrorStateHarness.html",[3,0.586,4,0.586,7,0.488,13,0.055,15,0.904,21,1.057,22,0.809,24,1.084,25,0.809,26,1.057,39,1.084,44,1.084,48,0.809,51,1.084,98,0.586,111,0.14,112,0.853,134,0.809,141,1.068,143,0.041,144,0.041,146,1.251,148,1.251,149,2.233,153,2.317,154,2.317,160,1.973,161,1.446,168,1.446,169,2.196,170,3.161,172,1.89,173,1.446]],["title/directives/LoadingState.html",[127,0.524,138,0.839]],["body/directives/LoadingState.html",[3,0.512,4,0.512,7,0.427,11,1.094,12,1.831,13,0.056,14,1.916,15,0.979,21,1.101,22,1.238,98,0.512,100,1.094,111,0.158,112,0.857,127,0.897,132,0.821,133,0.821,134,1.101,135,1.916,137,0.821,138,1.121,139,0.821,140,1.703,141,1.156,143,0.037,144,0.037,162,1.265,163,2.574,164,1.469,165,2.008,166,1.469,167,1.469]],["title/classes/LoadingStateHarness.html",[111,0.086,173,1.293]],["body/classes/LoadingStateHarness.html",[3,0.586,4,0.586,7,0.488,13,0.055,15,0.904,21,0.809,22,1.057,24,1.084,25,0.809,26,1.057,39,1.084,44,1.084,48,0.809,51,1.084,98,0.586,111,0.14,112,0.853,134,0.809,141,1.068,143,0.041,144,0.041,146,1.251,148,1.251,149,2.233,153,2.317,154,2.317,161,1.446,168,1.446,169,2.196,170,3.161,172,1.446,173,1.89,174,2.962]],["title/components/Markdown.html",[0,1.118,131,0.969]],["body/components/Markdown.html",[0,1.015,1,0.474,2,1.061,3,0.222,4,0.475,5,0.897,6,0.897,7,0.185,9,1.494,10,1.919,11,0.474,12,0.79,13,0.057,14,1.577,15,0.766,16,1.494,17,2.486,21,0.765,22,0.51,24,1.304,25,0.307,26,0.51,27,3.655,28,2.846,29,2.021,32,1.919,33,2.684,34,1.919,35,2.486,36,1.494,37,2.238,38,1.494,39,1.419,41,1.494,43,1.494,44,1.026,46,0.897,47,2.238,48,0.656,49,0.897,50,0.897,51,1.304,52,3.417,59,1.494,60,2.238,62,1.919,64,2.238,65,1.494,66,1.494,70,2.239,74,1.867,83,0.897,85,1.494,87,1.494,90,1.494,94,1.494,95,1.246,96,1.494,98,0.615,99,0.897,100,0.474,101,0.897,102,0.897,103,0.897,104,0.897,105,0.897,108,0.897,109,0.897,110,0.897,111,0.061,112,0.37,113,0.897,118,1.494,119,1.601,121,2.239,123,0.897,124,0.897,125,1.494,126,1.494,127,0.222,128,2.238,129,0.897,130,0.897,131,1.566,132,0.356,133,0.356,134,0.51,135,1.184,136,1.919,137,0.356,138,0.356,139,0.356,140,0.79,141,0.262,142,0.897,143,0.02,144,0.02,156,2.663,175,0.748,176,2.403,177,2.403,178,2.403,179,2.403,180,2.403,181,1.123,182,1.123,183,2.802,184,1.87,185,1.123,186,1.123,187,1.87,188,1.123,189,1.87,190,1.87,191,1.123,192,1.123,193,1.123,194,1.87,195,1.87,196,1.123,197,1.494,198,1.123,199,0.897,200,1.123,201,0.748,202,1.123,203,1.123,204,1.123,205,1.123,206,1.123,207,1.123]],["title/classes/MarkdownHarness.html",[111,0.086,208,1.764]],["body/classes/MarkdownHarness.html",[3,0.523,4,0.523,7,0.436,13,0.055,15,0.71,17,2.392,20,3.492,24,1.492,25,0.722,26,0.98,29,2.48,39,1.492,44,0.968,48,0.722,51,1.492,98,0.523,111,0.086,112,0.523,121,2.912,131,1.314,143,0.038,144,0.038,146,1.118,148,1.118,149,1.753,150,3.256,153,1.99,154,1.99,155,3.492,156,2.392,158,2.868,160,1.763,161,1.292,208,2.392,209,3.492,210,4.076,211,4.076,212,2.645,213,4.371,214,4.371,215,3.59,216,2.645]],["title/directives/OkState.html",[127,0.524,139,0.839]],["body/directives/OkState.html",[3,0.512,4,0.512,7,0.427,11,1.094,12,1.831,13,0.056,14,1.916,15,0.979,21,1.101,22,1.101,98,0.512,100,1.094,111,0.158,112,0.857,127,0.897,132,0.821,133,0.821,134,1.101,135,1.916,137,0.821,138,0.821,139,1.121,140,1.916,141,1.156,143,0.037,144,0.037,162,1.265,163,2.574,164,1.469,165,1.469,166,1.469,167,2.008]],["title/coverage.html",[217,2.869]],["body/coverage.html",[0,1.574,1,1.181,7,0.461,8,2.232,13,0.055,48,1.017,80,2.232,111,0.151,119,1.862,127,0.884,131,1.023,133,0.885,137,0.885,138,0.885,139,0.885,143,0.039,144,0.039,145,1.862,147,2.232,148,1.967,162,2.182,168,1.364,169,2.377,172,1.364,173,1.364,175,2.482,201,1.862,208,1.862,209,2.232,217,2.232,218,2.795,219,2.795,220,2.795,221,2.795,222,4.966,223,2.795,224,4.47,225,4.191,226,2.795,227,2.795,228,2.795,229,2.795,230,2.795,231,2.795,232,2.795,233,2.795,234,2.795]],["title/dependencies.html",[235,1.48,236,2.539]],["body/dependencies.html",[13,0.052,143,0.049,144,0.049,236,3.245,237,4.062,238,4.062]],["title/index.html",[25,0.606,239,2.221,240,2.221]],["body/index.html",[0,1.91,1,1.91,2,2.342,13,0.047,29,1.858,30,3.298,82,2.616,95,2.182,131,1.656,132,1.037,141,0.765,143,0.043,144,0.043,235,2.182,241,3.275,242,3.275,243,3.275,244,3.275,245,3.275,246,3.275,247,3.275,248,3.275,249,3.275,250,4.129,251,3.275,252,3.275,253,4.129,254,3.275,255,3.275,256,4.129,257,3.275,258,3.275,259,3.275,260,3.275,261,3.275,262,3.275,263,3.275,264,3.275,265,3.275]],["title/modules.html",[266,2.869]],["body/modules.html",[13,0.05,143,0.05,144,0.05,266,3.299]],["title/overview.html",[267,2.869]],["body/overview.html",[2,2.267,13,0.049,132,1.266,143,0.049,144,0.049,146,1.688,267,3.192,268,3.996,269,3.996,270,3.996]],["title/properties.html",[26,0.868,235,1.48]],["body/properties.html",[13,0.052,26,1.109,143,0.049,144,0.049,271,4.062,272,4.062]],["title/miscellaneous/typealiases.html",[273,1.774,274,3.178]],["body/miscellaneous/typealiases.html",[13,0.048,25,1.057,48,1.057,70,2.58,74,2.58,131,1.417,143,0.048,144,0.048,175,2.58,197,3.093,199,3.093,201,3.047,273,3.093,275,3.872,276,3.872]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":222,"title":{},"body":{"coverage.html":{}}}],["0.0.0",{"_index":272,"title":{},"body":{"properties.html":{}}}],["0.0.2",{"_index":258,"title":{},"body":{"index.html":{}}}],["0.4.1",{"_index":260,"title":{},"body":{"index.html":{}}}],["0/1",{"_index":224,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":225,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":223,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":255,"title":{},"body":{"index.html":{}}}],["1.1.1",{"_index":262,"title":{},"body":{"index.html":{}}}],["1/1",{"_index":230,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":229,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":268,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":238,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":232,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":251,"title":{},"body":{"index.html":{}}}],["4",{"_index":269,"title":{},"body":{"overview.html":{}}}],["4/10",{"_index":227,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":226,"title":{},"body":{"coverage.html":{}}}],["45",{"_index":220,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":270,"title":{},"body":{"overview.html":{}}}],["5/11",{"_index":221,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":231,"title":{},"body":{"coverage.html":{}}}],["actual_component",{"_index":142,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["alias",{"_index":228,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":275,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular",{"_index":250,"title":{},"body":{"index.html":{}}}],["angular/cdk/testing",{"_index":161,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["angular/common/http",{"_index":102,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["angular/core",{"_index":100,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["angular/platform",{"_index":104,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["async",{"_index":180,"title":{},"body":{"components/Markdown.html":{}}}],["attribute",{"_index":58,"title":{},"body":{"components/Code.html":{}}}],["block",{"_index":110,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["both",{"_index":123,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["browser",{"_index":105,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["case",{"_index":20,"title":{},"body":{"components/Code.html":{},"classes/MarkdownHarness.html":{}}}],["class",{"_index":111,"title":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["classes",{"_index":146,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{},"overview.html":{}}}],["code",{"_index":1,"title":{"components/Code.html":{}},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"components/Markdown.html":{},"coverage.html":{},"index.html":{}}}],["code'},{'name",{"_index":130,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["codeharness",{"_index":145,"title":{"classes/CodeHarness.html":{}},"body":{"classes/CodeHarness.html":{},"coverage.html":{}}}],["common",{"_index":253,"title":{},"body":{"index.html":{}}}],["community",{"_index":265,"title":{},"body":{"index.html":{}}}],["compatible",{"_index":248,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/Code.html":{},"components/Markdown.html":{}},"body":{"components/Code.html":{},"components/Markdown.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":129,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["componentharness",{"_index":170,"title":{},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"index.html":{},"overview.html":{}}}],["computed",{"_index":60,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["console.warn",{"_index":122,"title":{},"body":{"components/Code.html":{}}}],["const",{"_index":204,"title":{},"body":{"components/Markdown.html":{}}}],["content",{"_index":29,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"index.html":{}}}],["contentcontainercomponentharness",{"_index":150,"title":{},"body":{"classes/CodeHarness.html":{},"classes/MarkdownHarness.html":{}}}],["coverage",{"_index":217,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["custom",{"_index":72,"title":{},"body":{"components/Code.html":{}}}],["default",{"_index":24,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{}}}],["defined",{"_index":39,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{}}}],["dependencies",{"_index":236,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["directive",{"_index":127,"title":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["directives",{"_index":132,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"index.html":{},"overview.html":{}}}],["directly",{"_index":55,"title":{},"body":{"components/Code.html":{}}}],["documentation",{"_index":218,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["domsanitizer",{"_index":103,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["element",{"_index":126,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["empty",{"_index":134,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["emptystate",{"_index":133,"title":{"directives/EmptyState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["emptystateharness",{"_index":168,"title":{"classes/EmptyStateHarness.html":{}},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"coverage.html":{}}}],["error",{"_index":21,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["error(\"either",{"_index":120,"title":{},"body":{"components/Code.html":{}}}],["errorstate",{"_index":137,"title":{"directives/ErrorState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["errorstateharness",{"_index":172,"title":{"classes/ErrorStateHarness.html":{}},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"coverage.html":{}}}],["export",{"_index":112,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["exportas",{"_index":163,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["extends",{"_index":149,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["fetch",{"_index":91,"title":{},"body":{"components/Code.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["function",{"_index":73,"title":{},"body":{"components/Code.html":{}}}],["gethighlighter",{"_index":107,"title":{},"body":{"components/Code.html":{}}}],["gethighlighter().codetohtml(text",{"_index":114,"title":{},"body":{"components/Code.html":{}}}],["getloaded",{"_index":210,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["getlocal",{"_index":211,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["getmdvel",{"_index":151,"title":{},"body":{"classes/CodeHarness.html":{}}}],["getsrcel",{"_index":152,"title":{},"body":{"classes/CodeHarness.html":{}}}],["getting",{"_index":239,"title":{"index.html":{}},"body":{}}],["harness.ts",{"_index":148,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{},"coverage.html":{}}}],["harness.ts:12",{"_index":171,"title":{},"body":{"classes/EmptyStateHarness.html":{}}}],["harness.ts:14",{"_index":212,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["harness.ts:4",{"_index":160,"title":{},"body":{"classes/CodeHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["harness.ts:6",{"_index":159,"title":{},"body":{"classes/CodeHarness.html":{}}}],["harness.ts:7",{"_index":157,"title":{},"body":{"classes/CodeHarness.html":{}}}],["harness.ts:8",{"_index":174,"title":{},"body":{"classes/LoadingStateHarness.html":{}}}],["harness.ts:9",{"_index":216,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["highlight",{"_index":198,"title":{},"body":{"components/Markdown.html":{}}}],["highlighter",{"_index":30,"title":{},"body":{"components/Code.html":{},"index.html":{}}}],["highlightercore",{"_index":106,"title":{},"body":{"components/Code.html":{}}}],["highlighting",{"_index":96,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["host",{"_index":12,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["hostselector",{"_index":154,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["html",{"_index":125,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["httpresource",{"_index":101,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["httpresource.text",{"_index":85,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["https://marked.js.org/using_advanced#options",{"_index":200,"title":{},"body":{"components/Markdown.html":{}}}],["https://shiki.style/languages",{"_index":84,"title":{},"body":{"components/Code.html":{}}}],["https://shiki.style/themes",{"_index":97,"title":{},"body":{"components/Code.html":{}}}],["identifier",{"_index":80,"title":{},"body":{"components/Code.html":{},"coverage.html":{}}}],["ignored",{"_index":59,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["implements",{"_index":9,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["import",{"_index":98,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["include",{"_index":71,"title":{},"body":{"components/Code.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["inject",{"_index":99,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["inject(domsanitizer",{"_index":87,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["input",{"_index":52,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["input(\"github",{"_index":194,"title":{},"body":{"components/Markdown.html":{}}}],["input(\"javascript",{"_index":75,"title":{},"body":{"components/Code.html":{}}}],["input(\"nord",{"_index":92,"title":{},"body":{"components/Code.html":{}}}],["lang",{"_index":31,"title":{},"body":{"components/Code.html":{}}}],["language",{"_index":78,"title":{},"body":{"components/Code.html":{}}}],["legend",{"_index":124,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["light",{"_index":195,"title":{},"body":{"components/Markdown.html":{}}}],["loaded",{"_index":158,"title":{},"body":{"classes/CodeHarness.html":{},"classes/MarkdownHarness.html":{}}}],["loading",{"_index":22,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["loadingstate",{"_index":138,"title":{"directives/LoadingState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["loadingstateharness",{"_index":173,"title":{"classes/LoadingStateHarness.html":{}},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"coverage.html":{}}}],["local",{"_index":215,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["made",{"_index":264,"title":{},"body":{"index.html":{}}}],["maerked",{"_index":189,"title":{},"body":{"components/Markdown.html":{}}}],["markdown",{"_index":131,"title":{"components/Markdown.html":{}},"body":{"components/Code.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["markdownharness",{"_index":208,"title":{"classes/MarkdownHarness.html":{}},"body":{"classes/MarkdownHarness.html":{},"coverage.html":{}}}],["markdownoptions",{"_index":201,"title":{},"body":{"components/Markdown.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["marked",{"_index":74,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"miscellaneous/typealiases.html":{}}}],["marked(highlight(this.theme",{"_index":205,"title":{},"body":{"components/Markdown.html":{}}}],["marked.parse(text",{"_index":206,"title":{},"body":{"components/Markdown.html":{}}}],["markedoptions",{"_index":197,"title":{},"body":{"components/Markdown.html":{},"miscellaneous/typealiases.html":{}}}],["matching",{"_index":144,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["md",{"_index":156,"title":{},"body":{"classes/CodeHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{}}}],["mdcontent",{"_index":202,"title":{},"body":{"components/Markdown.html":{}}}],["metadata",{"_index":11,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["methods",{"_index":36,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["micro",{"_index":243,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":273,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mode",{"_index":214,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["modules",{"_index":266,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":47,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["new",{"_index":119,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"coverage.html":{}}}],["ng)angular",{"_index":242,"title":{},"body":{"index.html":{}}}],["ngoninit",{"_index":37,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["ok",{"_index":140,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["okstate",{"_index":139,"title":{"directives/OkState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["oninit",{"_index":10,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["optional",{"_index":49,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["options",{"_index":70,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"miscellaneous/typealiases.html":{}}}],["overview",{"_index":267,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":235,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["packages",{"_index":244,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":46,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["parse",{"_index":38,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["parse(text",{"_index":43,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["parser",{"_index":190,"title":{},"body":{"components/Markdown.html":{}}}],["parsing",{"_index":199,"title":{},"body":{"components/Markdown.html":{},"miscellaneous/typealiases.html":{}}}],["private",{"_index":33,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["programming",{"_index":77,"title":{},"body":{"components/Code.html":{}}}],["projected",{"_index":213,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["properties",{"_index":26,"title":{"properties.html":{}},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"properties.html":{}}}],["protected",{"_index":28,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["provide",{"_index":56,"title":{},"body":{"components/Code.html":{}}}],["provided",{"_index":121,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{}}}],["readonly",{"_index":27,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["reference",{"_index":252,"title":{},"body":{"index.html":{}}}],["registry",{"_index":263,"title":{},"body":{"index.html":{}}}],["rendered",{"_index":187,"title":{},"body":{"components/Markdown.html":{}}}],["res",{"_index":32,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["res.error",{"_index":179,"title":{},"body":{"components/Markdown.html":{}}}],["res.hasvalue",{"_index":176,"title":{},"body":{"components/Markdown.html":{}}}],["res.isloading",{"_index":178,"title":{},"body":{"components/Markdown.html":{}}}],["res.status",{"_index":19,"title":{},"body":{"components/Code.html":{}}}],["res.value",{"_index":177,"title":{},"body":{"components/Markdown.html":{}}}],["resolved",{"_index":23,"title":{},"body":{"components/Code.html":{}}}],["results",{"_index":143,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":62,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["returns",{"_index":41,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["sanitize",{"_index":34,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["see",{"_index":83,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["set",{"_index":57,"title":{},"body":{"components/Code.html":{}}}],["shiki",{"_index":82,"title":{},"body":{"components/Code.html":{},"index.html":{}}}],["simple",{"_index":246,"title":{},"body":{"index.html":{}}}],["smart",{"_index":247,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["src",{"_index":17,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{}}}],["started",{"_index":240,"title":{"index.html":{}},"body":{}}],["state",{"_index":141,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"index.html":{}}}],["state,[xpr",{"_index":135,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["state]'},{'name",{"_index":136,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["statements",{"_index":219,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":153,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["string",{"_index":44,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{}}}],["style.display",{"_index":109,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["supported",{"_index":81,"title":{},"body":{"components/Code.html":{}}}],["switch",{"_index":18,"title":{},"body":{"components/Code.html":{}}}],["syntax",{"_index":95,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"index.html":{}}}],["table",{"_index":234,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":233,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":16,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["text",{"_index":50,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["theme",{"_index":35,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["this.code",{"_index":61,"title":{},"body":{"components/Code.html":{}}}],["this.content(this.md",{"_index":203,"title":{},"body":{"components/Markdown.html":{}}}],["this.lang",{"_index":115,"title":{},"body":{"components/Code.html":{}}}],["this.locatorforoptional(\".xpr",{"_index":155,"title":{},"body":{"classes/CodeHarness.html":{},"classes/MarkdownHarness.html":{}}}],["this.md",{"_index":183,"title":{},"body":{"components/Markdown.html":{}}}],["this.options",{"_index":207,"title":{},"body":{"components/Markdown.html":{}}}],["this.parse",{"_index":67,"title":{},"body":{"components/Code.html":{}}}],["this.parse(this.code",{"_index":63,"title":{},"body":{"components/Code.html":{}}}],["this.parse(this.md",{"_index":184,"title":{},"body":{"components/Markdown.html":{}}}],["this.parse(this.res.hasvalue",{"_index":65,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["this.res.value",{"_index":66,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["this.sanitize.bypasssecuritytrusthtml",{"_index":113,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["this.src",{"_index":64,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["this.theme",{"_index":116,"title":{},"body":{"components/Code.html":{}}}],["throw",{"_index":118,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["tostring",{"_index":117,"title":{},"body":{"components/Code.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["tslib",{"_index":237,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":48,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":274,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["url",{"_index":90,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["use",{"_index":94,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["used",{"_index":54,"title":{},"body":{"components/Code.html":{}}}],["valid",{"_index":79,"title":{},"body":{"components/Code.html":{}}}],["value",{"_index":51,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{}}}],["var",{"_index":128,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["vendor",{"_index":256,"title":{},"body":{"index.html":{}}}],["version",{"_index":271,"title":{},"body":{"properties.html":{}}}],["very",{"_index":245,"title":{},"body":{"index.html":{}}}],["void",{"_index":42,"title":{},"body":{"components/Code.html":{}}}],["xp)experimental",{"_index":241,"title":{},"body":{"index.html":{}}}],["xpr",{"_index":15,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["xpremptystate",{"_index":164,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["xprerrorstate",{"_index":166,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["xprloadingstate",{"_index":165,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["xprng/.../markdown.ts",{"_index":276,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["xprng/code",{"_index":261,"title":{},"body":{"index.html":{}}}],["xprng/code/src/code.ts",{"_index":8,"title":{},"body":{"components/Code.html":{},"coverage.html":{}}}],["xprng/code/src/code.ts:42",{"_index":53,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:49",{"_index":89,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:57",{"_index":76,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:65",{"_index":93,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:72",{"_index":69,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:76",{"_index":68,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:86",{"_index":45,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:95",{"_index":86,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:96",{"_index":88,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:98",{"_index":40,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/testing/code",{"_index":147,"title":{},"body":{"classes/CodeHarness.html":{},"coverage.html":{}}}],["xprng/common",{"_index":254,"title":{},"body":{"index.html":{}}}],["xprng/common/src/states.ts",{"_index":162,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["xprng/common/testing/state",{"_index":169,"title":{},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"coverage.html":{}}}],["xprng/markdown",{"_index":259,"title":{},"body":{"index.html":{}}}],["xprng/markdown/src/markdown.ts",{"_index":175,"title":{},"body":{"components/Markdown.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["xprng/markdown/src/markdown.ts:47",{"_index":186,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:54",{"_index":193,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:60",{"_index":196,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:66",{"_index":188,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:71",{"_index":185,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:77",{"_index":182,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:84",{"_index":191,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:85",{"_index":192,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:87",{"_index":181,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/testing/markdown",{"_index":209,"title":{},"body":{"classes/MarkdownHarness.html":{},"coverage.html":{}}}],["xprng/vendor",{"_index":257,"title":{},"body":{"index.html":{}}}],["xprng/vendor/shiki",{"_index":108,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["xprokstate",{"_index":167,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["zoneless",{"_index":249,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/Code.html":{"url":"components/Code.html","title":"component - Code","body":"\n                   \n\n\n\n\n\n  Components\n  \n  Code\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    xprng/code/src/code.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                xpr-code\n            \n\n\n\n\n\n            \n                template\n                @if (code()) {\n  \n}\n@if (src()) {\n  @switch (res.status()) {\n    @case (\"error\") {\n      \n    }\n    @case (\"loading\") {\n      \n    }\n    @case (\"resolved\") {\n      \n    }\n    @default {\n      \n    }\n  }\n}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                code\n                            \n                            \n                                    Protected\n                                content\n                            \n                            \n                                    Readonly\n                                highlighter\n                            \n                            \n                                    Readonly\n                                lang\n                            \n                            \n                                    Protected\n                                    Readonly\n                                res\n                            \n                            \n                                    Private\n                                    Readonly\n                                sanitize\n                            \n                            \n                                    Readonly\n                                src\n                            \n                            \n                                    Readonly\n                                theme\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                parse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in xprng/code/src/code.ts:98\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parse\n                        \n                    \n                \n            \n            \n                \n                        \n                    parse(text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in xprng/code/src/code.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:42\n                        \n                    \n\n            \n                \n                    Source code content as a string\nThis can be used to directly provide source code content.\nIf this is set, the src attribute will be ignored.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => {\n    if (this.code()) return this.parse(this.code() ?? \"\");\n\n    if (this.src()) {\n      return this.parse(this.res.hasValue() ? this.res.value() : \"\");\n    }\n\n    return this.parse(\"\");\n  })\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        highlighter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:72\n                        \n                    \n\n            \n                \n                    Options for the code content.\nThis can include a custom highlighter function and marked options.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        lang\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(\"javascript\")\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:57\n                        \n                    \n\n            \n                \n                    The programming language of the source code.\nThis should be a valid language identifier supported by Shiki.\nSee https://shiki.style/languages\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        res\n                        \n                    \n                \n            \n                \n                    \n                        Default value : httpResource.text(() => this.src())\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sanitize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DomSanitizer)\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        src\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:49\n                        \n                    \n\n            \n                \n                    The source URL of the source code content.\nThis is optional and can be used to fetch source code content from a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        theme\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(\"nord\")\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:65\n                        \n                    \n\n            \n                \n                    The theme to use for syntax highlighting.\nThis can be any theme supported by Shiki.\nSee https://shiki.style/themes\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, computed, inject, input, OnInit } from \"@angular/core\";\nimport { httpResource } from \"@angular/common/http\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport type { HighlighterCore } from \"shiki\";\nimport { getHighlighter } from \"@xprng/vendor/shiki\";\n\n@Component({\n  selector: \"xpr-code\",\n  host: {\n    \"[style.display]\": '\"block\"',\n    class: \"xpr-code\",\n  },\n  template: `\n    @if (code()) {\n      \n    }\n    @if (src()) {\n      @switch (res.status()) {\n        @case (\"error\") {\n          \n        }\n        @case (\"loading\") {\n          \n        }\n        @case (\"resolved\") {\n          \n        }\n        @default {\n          \n        }\n      }\n    }\n  `,\n})\nexport class Code implements OnInit {\n  /**\n   * Source code content as a string\n   * This can be used to directly provide source code content.\n   * If this is set, the `src` attribute will be ignored.\n   * @input\n   */\n  readonly code = input();\n\n  /**\n   * The source URL of the source code content.\n   * This is optional and can be used to fetch source code content from a URL.\n   * @input\n   */\n  readonly src = input();\n\n  /**\n   * The programming language of the source code.\n   * This should be a valid language identifier supported by Shiki.\n   * @see https://shiki.style/languages\n   * @input\n   */\n  readonly lang = input(\"javascript\");\n\n  /**\n   * The theme to use for syntax highlighting.\n   * This can be any theme supported by Shiki.\n   * @see https://shiki.style/themes\n   * @input\n   */\n  readonly theme = input(\"nord\");\n\n  /**\n   * Options for the code content.\n   * This can include a custom highlighter function and marked options.\n   * @input\n   */\n  readonly highlighter = input();\n\n  //\n\n  protected content = computed(() => {\n    if (this.code()) return this.parse(this.code() ?? \"\");\n\n    if (this.src()) {\n      return this.parse(this.res.hasValue() ? this.res.value() : \"\");\n    }\n\n    return this.parse(\"\");\n  });\n\n  private parse(text: string) {\n    return this.sanitize.bypassSecurityTrustHtml(\n      getHighlighter().codeToHtml(text, {\n        lang: this.lang(),\n        theme: this.theme(),\n      }).toString(),\n    );\n  }\n\n  protected readonly res = httpResource.text(() => this.src());\n  private readonly sanitize = inject(DomSanitizer);\n\n  ngOnInit() {\n    if (!this.code() && !this.src()) {\n      throw new Error(\"Either 'code' or 'src' input must be provided.\");\n    }\n    if (this.code() && this.src()) {\n      console.warn(\n        \"Either 'code' or 'src' input should be provided, not both.\",\n      );\n    }\n  }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (code()) {  }@if (src()) {  @switch (res.status()) {    @case (\"error\") {          }    @case (\"loading\") {          }    @case (\"resolved\") {          }    @default {          }  }}'\n    var COMPONENTS = [{'name': 'Code', 'selector': 'xpr-code'},{'name': 'Markdown', 'selector': 'xpr-markdown'}];\n    var DIRECTIVES = [{'name': 'EmptyState', 'selector': 'xpr-empty-state,[xpr-empty-state]'},{'name': 'ErrorState', 'selector': 'xpr-error-state,[xpr-error-state]'},{'name': 'LoadingState', 'selector': 'xpr-loading-state,[xpr-loading-state]'},{'name': 'OkState', 'selector': 'xpr-ok-state,[xpr-ok-state]'}];\n    var ACTUAL_COMPONENT = {'name': 'Code'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CodeHarness.html":{"url":"classes/CodeHarness.html","title":"class - CodeHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CodeHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/code/testing/code-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ContentContainerComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getMdVEl\n                            \n                            \n                                getSrcEl\n                            \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        getMdVEl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.locatorForOptional(\".xpr-md\")\n                    \n                \n                    \n                        \n                                Defined in xprng/code/testing/code-harness.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSrcEl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.locatorForOptional(\".xpr-loaded\")\n                    \n                \n                    \n                        \n                                Defined in xprng/code/testing/code-harness.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-code\"\n                    \n                \n                    \n                        \n                                Defined in xprng/code/testing/code-harness.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ContentContainerComponentHarness } from \"@angular/cdk/testing\";\n\nexport class CodeHarness extends ContentContainerComponentHarness {\n  static hostSelector = \"xpr-code\";\n\n  getSrcEl = this.locatorForOptional(\".xpr-loaded\");\n  getMdVEl = this.locatorForOptional(\".xpr-md\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/EmptyState.html":{"url":"directives/EmptyState.html","title":"directive - EmptyState","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  EmptyState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/src/states.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        xpr-empty-state,[xpr-empty-state]\n                    \n\n\n\n                    \n                        exportAs\n                        xprEmptyState\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"xpr-loading-state,[xpr-loading-state]\",\n  exportAs: \"xprLoadingState\",\n  host: {\n    class: \"xpr-loading-state\",\n  },\n})\nexport class LoadingState {\n}\n\n@Directive({\n  selector: \"xpr-error-state,[xpr-error-state]\",\n  exportAs: \"xprErrorState\",\n  host: {\n    class: \"xpr-error-state\",\n  },\n})\nexport class ErrorState {\n}\n\n@Directive({\n  selector: \"xpr-ok-state,[xpr-ok-state]\",\n  exportAs: \"xprOkState\",\n  host: {\n    class: \"xpr-ok-state\",\n  },\n})\nexport class OkState {\n}\n\n@Directive({\n  selector: \"xpr-empty-state,[xpr-empty-state]\",\n  exportAs: \"xprEmptyState\",\n  host: {\n    class: \"xpr-empty-state\",\n  },\n})\nexport class EmptyState {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmptyStateHarness.html":{"url":"classes/EmptyStateHarness.html","title":"class - EmptyStateHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmptyStateHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/testing/state-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-empty-state\"\n                    \n                \n                    \n                        \n                                Defined in xprng/common/testing/state-harness.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentHarness } from \"@angular/cdk/testing\";\n\nexport class ErrorStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-error-state\";\n}\n\nexport class LoadingStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-loading-state\";\n}\n\nexport class EmptyStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-empty-state\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ErrorState.html":{"url":"directives/ErrorState.html","title":"directive - ErrorState","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  ErrorState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/src/states.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        xpr-error-state,[xpr-error-state]\n                    \n\n\n\n                    \n                        exportAs\n                        xprErrorState\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"xpr-loading-state,[xpr-loading-state]\",\n  exportAs: \"xprLoadingState\",\n  host: {\n    class: \"xpr-loading-state\",\n  },\n})\nexport class LoadingState {\n}\n\n@Directive({\n  selector: \"xpr-error-state,[xpr-error-state]\",\n  exportAs: \"xprErrorState\",\n  host: {\n    class: \"xpr-error-state\",\n  },\n})\nexport class ErrorState {\n}\n\n@Directive({\n  selector: \"xpr-ok-state,[xpr-ok-state]\",\n  exportAs: \"xprOkState\",\n  host: {\n    class: \"xpr-ok-state\",\n  },\n})\nexport class OkState {\n}\n\n@Directive({\n  selector: \"xpr-empty-state,[xpr-empty-state]\",\n  exportAs: \"xprEmptyState\",\n  host: {\n    class: \"xpr-empty-state\",\n  },\n})\nexport class EmptyState {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorStateHarness.html":{"url":"classes/ErrorStateHarness.html","title":"class - ErrorStateHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorStateHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/testing/state-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-error-state\"\n                    \n                \n                    \n                        \n                                Defined in xprng/common/testing/state-harness.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentHarness } from \"@angular/cdk/testing\";\n\nexport class ErrorStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-error-state\";\n}\n\nexport class LoadingStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-loading-state\";\n}\n\nexport class EmptyStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-empty-state\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/LoadingState.html":{"url":"directives/LoadingState.html","title":"directive - LoadingState","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  LoadingState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/src/states.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        xpr-loading-state,[xpr-loading-state]\n                    \n\n\n\n                    \n                        exportAs\n                        xprLoadingState\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"xpr-loading-state,[xpr-loading-state]\",\n  exportAs: \"xprLoadingState\",\n  host: {\n    class: \"xpr-loading-state\",\n  },\n})\nexport class LoadingState {\n}\n\n@Directive({\n  selector: \"xpr-error-state,[xpr-error-state]\",\n  exportAs: \"xprErrorState\",\n  host: {\n    class: \"xpr-error-state\",\n  },\n})\nexport class ErrorState {\n}\n\n@Directive({\n  selector: \"xpr-ok-state,[xpr-ok-state]\",\n  exportAs: \"xprOkState\",\n  host: {\n    class: \"xpr-ok-state\",\n  },\n})\nexport class OkState {\n}\n\n@Directive({\n  selector: \"xpr-empty-state,[xpr-empty-state]\",\n  exportAs: \"xprEmptyState\",\n  host: {\n    class: \"xpr-empty-state\",\n  },\n})\nexport class EmptyState {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingStateHarness.html":{"url":"classes/LoadingStateHarness.html","title":"class - LoadingStateHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingStateHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/testing/state-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-loading-state\"\n                    \n                \n                    \n                        \n                                Defined in xprng/common/testing/state-harness.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentHarness } from \"@angular/cdk/testing\";\n\nexport class ErrorStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-error-state\";\n}\n\nexport class LoadingStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-loading-state\";\n}\n\nexport class EmptyStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-empty-state\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Markdown.html":{"url":"components/Markdown.html","title":"component - Markdown","body":"\n                   \n\n\n\n\n\n  Components\n  \n  Markdown\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    xprng/markdown/src/markdown.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                xpr-markdown\n            \n\n\n\n\n\n            \n                template\n                @if (md()) {\n  \n  \n\n} @else if (src()) {\n  \n  @if (res.hasValue() && res.value()) {\n    \n  } @else if (res.isLoading()) {\n    \n  } @else if (res.error()) {\n    \n  } @else {\n    \n  }\n}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                content\n                            \n                            \n                                    Readonly\n                                md\n                            \n                            \n                                    Readonly\n                                options\n                            \n                            \n                                    Protected\n                                    Readonly\n                                res\n                            \n                            \n                                    Private\n                                    Readonly\n                                sanitize\n                            \n                            \n                                    Readonly\n                                src\n                            \n                            \n                                    Readonly\n                                theme\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ngOnInit\n                            \n                            \n                                    Private\n                                parse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in xprng/markdown/src/markdown.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parse\n                        \n                    \n                \n            \n            \n                \n                        \n                    parse(text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in xprng/markdown/src/markdown.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => {\n    return this.md()\n      ? this.parse(this.md()!)\n      : this.parse(this.res.hasValue() ? this.res.value() : \"\");\n  })\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        md\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:47\n                        \n                    \n\n            \n                \n                    The markdown content to be rendered.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input>({})\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:66\n                        \n                    \n\n            \n                \n                    Options for the Maerked parser\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        res\n                        \n                    \n                \n            \n                \n                    \n                        Default value : httpResource.text(() => this.src())\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sanitize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DomSanitizer)\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        src\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:54\n                        \n                    \n\n            \n                \n                    The source URL of the markdown content.\nIf md is provided, this will be ignored.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        theme\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(\"github-light\")\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:60\n                        \n                    \n\n            \n                \n                    The theme to use for syntax highlighting.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, computed, inject, input, OnInit } from \"@angular/core\";\nimport { httpResource } from \"@angular/common/http\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { Marked, type MarkedOptions } from \"marked\";\nimport { highlight } from \"@xprng/vendor/shiki\";\n\n/**\n * Marked options for parsing markdown.\n * @see https://marked.js.org/using_advanced#options\n */\nexport type MarkdownOptions = MarkedOptions;\n\n@Component({\n  selector: \"xpr-markdown\",\n  host: {\n    \"[style.display]\": '\"block\"',\n    class: \"xpr-markdown\",\n  },\n  template: `\n    @if (md()) {\n      \n      \n\n    } @else if (src()) {\n      \n      @if (res.hasValue() && res.value()) {\n        \n      } @else if (res.isLoading()) {\n        \n      } @else if (res.error()) {\n        \n      } @else {\n        \n      }\n    }\n  `,\n})\nexport class Markdown implements OnInit {\n  /**\n   * The markdown content to be rendered.\n   * @input\n   */\n  readonly md = input();\n\n  /**\n   * The source URL of the markdown content.\n   * If `md` is provided, this will be ignored.\n   * @input\n   */\n  readonly src = input();\n\n  /**\n   * The theme to use for syntax highlighting.\n   * @input\n   */\n  readonly theme = input(\"github-light\");\n\n  /**\n   * Options for the Maerked parser\n   * @input\n   */\n  readonly options = input>({});\n\n  //\n\n  // protected mdContent = computed(() => this.content(this.md() ?? \"\"));\n  protected content = computed(() => {\n    return this.md()\n      ? this.parse(this.md()!)\n      : this.parse(this.res.hasValue() ? this.res.value() : \"\");\n  });\n\n  private parse(text: string) {\n    const marked = new Marked(highlight(this.theme()));\n    return this.sanitize.bypassSecurityTrustHtml(\n      marked.parse(text, this.options()) as string,\n    );\n  }\n\n  protected readonly res = httpResource.text(() => this.src());\n  private readonly sanitize = inject(DomSanitizer);\n\n  async ngOnInit() {\n    if (!this.md() && !this.src()) {\n      throw new Error(\n        \"Either 'md' or 'src' input must be provided. Neither provided.\",\n      );\n    }\n    if (this.md() && this.src()) {\n      throw new Error(\n        \"Either 'md' or 'src' input must be provided. Both provided.\",\n      );\n    }\n  }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (md()) {    } @else if (src()) {    @if (res.hasValue() && res.value()) {      } @else if (res.isLoading()) {      } @else if (res.error()) {      } @else {      }}'\n    var COMPONENTS = [{'name': 'Code', 'selector': 'xpr-code'},{'name': 'Markdown', 'selector': 'xpr-markdown'}];\n    var DIRECTIVES = [{'name': 'EmptyState', 'selector': 'xpr-empty-state,[xpr-empty-state]'},{'name': 'ErrorState', 'selector': 'xpr-error-state,[xpr-error-state]'},{'name': 'LoadingState', 'selector': 'xpr-loading-state,[xpr-loading-state]'},{'name': 'OkState', 'selector': 'xpr-ok-state,[xpr-ok-state]'}];\n    var ACTUAL_COMPONENT = {'name': 'Markdown'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MarkdownHarness.html":{"url":"classes/MarkdownHarness.html","title":"class - MarkdownHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MarkdownHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/markdown/testing/markdown-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ContentContainerComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getLoaded\n                            \n                            \n                                getLocal\n                            \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        getLoaded\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.locatorForOptional(\".xpr-loaded\")\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/testing/markdown-harness.ts:14\n                        \n                    \n\n            \n                \n                    The content projected in case of \"src\" provided mode.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLocal\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.locatorForOptional(\".xpr-local\")\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/testing/markdown-harness.ts:9\n                        \n                    \n\n            \n                \n                    The content projected in case of \"md\" provided mode.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-markdown\"\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/testing/markdown-harness.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ContentContainerComponentHarness } from \"@angular/cdk/testing\";\n\nexport class MarkdownHarness extends ContentContainerComponentHarness {\n  static hostSelector = \"xpr-markdown\";\n\n  /**\n   * The content projected in case of \"md\" provided mode.\n   */\n  getLocal = this.locatorForOptional(\".xpr-local\");\n\n  /**\n   * The content projected in case of \"src\" provided mode.\n   */\n  getLoaded = this.locatorForOptional(\".xpr-loaded\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/OkState.html":{"url":"directives/OkState.html","title":"directive - OkState","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  OkState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/src/states.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        xpr-ok-state,[xpr-ok-state]\n                    \n\n\n\n                    \n                        exportAs\n                        xprOkState\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"xpr-loading-state,[xpr-loading-state]\",\n  exportAs: \"xprLoadingState\",\n  host: {\n    class: \"xpr-loading-state\",\n  },\n})\nexport class LoadingState {\n}\n\n@Directive({\n  selector: \"xpr-error-state,[xpr-error-state]\",\n  exportAs: \"xprErrorState\",\n  host: {\n    class: \"xpr-error-state\",\n  },\n})\nexport class ErrorState {\n}\n\n@Directive({\n  selector: \"xpr-ok-state,[xpr-ok-state]\",\n  exportAs: \"xprOkState\",\n  host: {\n    class: \"xpr-ok-state\",\n  },\n})\nexport class OkState {\n}\n\n@Directive({\n  selector: \"xpr-empty-state,[xpr-empty-state]\",\n  exportAs: \"xprEmptyState\",\n  host: {\n    class: \"xpr-empty-state\",\n  },\n})\nexport class EmptyState {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                xprng/code/src/code.ts\n            \n            component\n            Code\n            \n                45 %\n                (5/11)\n            \n        \n        \n            \n                \n                xprng/code/testing/code-harness.ts\n            \n            class\n            CodeHarness\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                xprng/common/src/states.ts\n            \n            directive\n            EmptyState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/common/src/states.ts\n            \n            directive\n            ErrorState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/common/src/states.ts\n            \n            directive\n            LoadingState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/common/src/states.ts\n            \n            directive\n            OkState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/common/testing/state-harness.ts\n            \n            class\n            EmptyStateHarness\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                xprng/common/testing/state-harness.ts\n            \n            class\n            ErrorStateHarness\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                xprng/common/testing/state-harness.ts\n            \n            class\n            LoadingStateHarness\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                xprng/markdown/src/markdown.ts\n            \n            component\n            Markdown\n            \n                40 %\n                (4/10)\n            \n        \n        \n            \n                \n                        xprng/markdown/src/markdown.ts\n            \n            type alias\n            MarkdownOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                xprng/markdown/testing/markdown-harness.ts\n            \n            class\n            MarkdownHarness\n            \n                50 %\n                (2/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n(XP)Experimental (NG)Angular Components\nMicro packages of very simple, yet, smart components.\n\nCompatible with Zoneless Angular 20+.\n\n\n\nComponent\nPackage\nReference\n\n\n\n\nCommon\n@xprng/common\n1.0.0\n\n\nVendor\n@xprng/vendor\n0.0.2\n\n\nMarkdown\n@xprng/markdown\n0.4.1\n\n\nCode\n@xprng/code\n1.1.1\n\n\n\nContent\n\nCommon\nState directives\n\n\nVendor\nShiki syntax highlighter registry\n\n\nMarkdown\nMarkdown component\n\n\nCode\nCode highlighter component\n\n\n\n\nMade with ❤️ for the Angular community.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MarkdownOptions   (xprng/.../markdown.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    xprng/markdown/src/markdown.ts\n    \n    \n        \n            \n                \n                    \n                    MarkdownOptions\n                \n            \n            \n                \n                    Marked options for parsing markdown.\n\n                \n            \n            \n                \n                        MarkedOptions\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
