var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/Code.html",[0,1.18,1,1.03]],["body/components/Code.html",[0,1.448,1,1.918,2,0.679,3,0.165,4,0.97,5,0.621,6,0.621,7,0.14,8,0.52,9,0.621,10,3.481,11,1.362,12,1.86,13,2.219,14,1.362,15,1.048,16,2.506,17,2.764,18,2.198,19,1.362,20,1.362,21,1.362,22,2.198,23,2.256,24,2.219,25,2.984,26,2.198,27,3.173,28,2.198,29,1.765,30,3.173,31,2.679,32,3.211,33,2.219,34,2.679,35,2.198,36,2.198,37,2.198,38,2.198,39,2.506,40,2.764,41,2.458,42,1.362,43,2.198,44,3.481,45,1.037,46,0.959,47,0.632,48,2.219,49,2.984,50,1.362,51,1.362,52,1.825,53,0.713,54,0.054,55,0.773,56,0.603,57,0.603,58,0.603,59,0.603,60,0.773,61,1.362,62,1.362,63,1.362,64,1.362,65,0.336,66,0.591,67,1.377,68,0.713,69,1.093,70,1.825,71,1.825,72,2.679,73,1.825,74,1.192,75,0.192,76,0.391,77,3.51,78,2.219,79,1.465,80,1.465,81,1.465,82,1.048,83,2.636,84,1.201,85,0.773,86,1.362,87,1.465,88,1.362,89,1.093,90,1.465,91,2.764,92,2.547,93,1.765,94,1.479,95,1.362,96,1.362,97,1.765,98,1.765,99,1.093,100,1.093,101,1.362,102,1.362,103,1.362,104,1.362,105,2.219,106,1.362,107,1.362,108,1.093,109,0.773,110,0.773,111,1.362,112,0.773,113,1.362,114,1.093,115,0.773,116,1.093,117,0.773,118,0.773,119,1.093,120,1.362,121,0.773,122,1.362,123,0.621,124,0.336,125,0.621,126,0.621,127,0.621,128,0.621,129,0.621,130,0.192,131,0.773,132,0.621,133,0.52,134,0.784,135,0.52,136,0.52,137,1.362,138,0.621,139,0.621,140,2.012,141,0.621,142,0.621,143,0.07,144,0.165,145,0.621,146,1.093,147,0.165,148,1.765,149,0.621,150,1.465,151,0.621,152,0.516,153,0.954,154,1.465,155,0.255,156,0.591,157,0.192,158,0.621,159,0.013,160,0.013]],["title/classes/CodeHarness.html",[143,0.14,161,1.83]],["body/classes/CodeHarness.html",[1,1.821,2,2.074,3,0.7,4,0.7,7,0.594,9,2.63,15,1.082,53,0.7,54,0.052,68,0.889,74,1.082,75,0.815,76,1.196,82,1.082,84,1.241,130,0.815,143,0.169,144,0.7,159,0.041,160,0.041,161,2.8,162,1.422,163,3.34,164,1.422,165,4.161,166,4.161,167,4.161,168,2.074,169,3.67,170,2.279,171,2.279,172,3.276,173,1.633]],["title/directives/EmptyState.html",[59,0.898,147,0.581]],["body/directives/EmptyState.html",[3,0.585,4,0.585,7,0.497,45,1.203,46,1.203,47,1.346,53,0.585,54,0.053,56,0.904,57,0.904,58,0.904,59,1.221,65,1.187,66,1.946,67,2.033,68,1.087,124,1.187,143,0.259,144,0.958,147,1.001,153,2.033,155,0.904,156,1.817,157,1.265,159,0.036,160,0.036,174,1.364,175,2.698,176,2.129,177,1.576,178,1.576,179,1.576]],["title/classes/EmptyStateHarness.html",[143,0.14,180,1.355]],["body/classes/EmptyStateHarness.html",[3,0.663,4,0.663,7,0.563,15,1.026,45,0.892,46,0.892,47,1.155,53,0.663,54,0.053,68,1.007,74,1.026,75,0.772,76,1.155,82,1.026,84,1.176,130,0.772,143,0.23,144,0.952,157,1.173,159,0.039,160,0.039,162,1.347,164,1.347,168,2.349,170,2.434,171,2.434,173,1.547,180,2.003,181,2.315,182,3.286,183,3.105,184,1.547,185,1.547]],["title/directives/ErrorState.html",[58,0.898,147,0.581]],["body/directives/ErrorState.html",[3,0.585,4,0.585,7,0.497,45,1.203,46,1.346,47,1.203,53,0.585,54,0.053,56,0.904,57,0.904,58,1.221,59,0.904,65,1.187,66,1.946,67,2.033,68,1.087,124,1.187,143,0.259,144,0.958,147,1.001,153,2.033,155,0.904,156,1.817,157,1.265,159,0.036,160,0.036,174,1.364,175,2.698,176,1.576,177,1.576,178,2.129,179,1.576]],["title/classes/ErrorStateHarness.html",[143,0.14,184,1.355]],["body/classes/ErrorStateHarness.html",[3,0.663,4,0.663,7,0.563,15,1.026,45,0.892,46,1.155,47,0.892,53,0.663,54,0.053,68,1.007,74,1.026,75,0.772,76,1.155,82,1.026,84,1.176,130,0.772,143,0.23,144,0.952,157,1.173,159,0.039,160,0.039,162,1.347,164,1.347,168,2.349,170,2.434,171,2.434,173,1.547,180,1.547,181,2.315,182,3.286,184,2.003,185,1.547,186,2.492]],["title/directives/LoadingState.html",[57,0.898,147,0.581]],["body/directives/LoadingState.html",[3,0.585,4,0.585,7,0.497,45,1.346,46,1.203,47,1.203,53,0.585,54,0.053,56,0.904,57,1.221,58,0.904,59,0.904,65,1.187,66,1.946,67,2.033,68,1.087,124,1.187,143,0.259,144,0.958,147,1.001,153,2.033,155,0.904,156,1.817,157,1.265,159,0.036,160,0.036,174,1.364,175,2.698,176,1.576,177,2.129,178,1.576,179,1.576]],["title/classes/LoadingStateHarness.html",[143,0.14,185,1.355]],["body/classes/LoadingStateHarness.html",[3,0.663,4,0.663,7,0.563,15,1.026,45,1.155,46,0.892,47,0.892,53,0.663,54,0.053,68,1.007,74,1.026,75,0.772,76,1.155,82,1.026,84,1.176,130,0.772,143,0.23,144,0.952,157,1.173,159,0.039,160,0.039,162,1.347,164,1.347,168,2.349,170,2.434,171,2.434,173,1.547,180,1.547,181,2.315,182,3.286,184,1.547,185,2.003,187,3.105]],["title/components/Markdown.html",[0,1.18,152,1.03]],["body/components/Markdown.html",[0,1.114,1,0.463,2,1.004,3,0.261,4,0.549,5,0.982,6,0.982,7,0.222,12,1.356,13,1.617,15,0.983,23,2.252,24,1.617,32,2.642,33,1.617,41,2.156,45,0.579,46,0.856,47,0.579,48,0.982,53,0.703,54,0.054,56,0.404,57,0.404,58,0.404,59,0.404,65,0.531,66,0.874,67,1.697,68,0.866,69,1.617,74,1.237,75,0.304,76,0.579,77,3.802,78,3.005,79,2.062,80,2.842,81,2.062,82,1.237,83,2.993,84,1.534,89,1.617,90,2.39,92,2.39,93,1.617,94,1.728,97,0.982,98,1.617,99,0.982,100,0.982,105,2.062,108,1.617,114,1.617,116,1.617,119,0.982,123,0.982,124,0.531,125,0.982,126,0.982,127,0.982,128,0.982,129,0.982,130,0.639,132,0.982,134,2.039,136,0.823,140,1.617,141,0.982,142,0.982,143,0.104,144,0.43,145,0.982,146,1.617,147,0.261,148,2.39,149,0.982,150,2.39,151,0.982,152,1.684,153,1.292,154,2.062,155,0.404,156,0.874,157,0.304,158,0.982,159,0.02,160,0.02,188,0.823,189,2.015,190,2.568,191,3.35,192,2.568,193,2.568,194,2.568,195,2.568,196,2.842,197,2.015,198,2.568,199,2.977,200,1.224,201,2.015,202,2.015,203,1.224,204,1.224,205,2.977,206,2.015,207,2.015,208,1.224,209,1.224,210,2.015,211,1.224,212,2.015,213,2.015,214,1.224,215,1.224,216,1.224,217,2.015,218,2.015,219,1.224,220,2.39,221,1.617,222,1.224,223,0.982,224,1.224,225,0.823,226,1.224,227,1.224,228,1.224,229,1.224,230,1.224]],["title/classes/MarkdownHarness.html",[143,0.14,231,1.83]],["body/classes/MarkdownHarness.html",[3,0.596,4,0.596,7,0.507,15,0.922,23,2.158,41,2.604,53,0.596,54,0.053,68,0.801,72,3.63,74,1.397,75,0.694,76,1.077,82,1.397,84,1.602,130,0.694,134,2.604,143,0.144,144,0.596,152,1.419,159,0.037,160,0.037,162,1.211,164,1.211,168,1.868,169,3.396,170,2.108,171,2.108,173,1.391,186,2.241,191,3.008,231,2.522,232,3.63,233,4.23,234,4.23,235,4.521,236,3.747,237,2.792,238,4.521,239,4.521,240,3.747,241,2.792]],["title/directives/OkState.html",[147,0.581,155,0.898]],["body/directives/OkState.html",[3,0.585,4,0.585,7,0.497,45,1.203,46,1.203,47,1.203,53,0.585,54,0.053,56,0.904,57,0.904,58,0.904,59,0.904,65,1.187,66,1.946,67,2.033,68,1.087,124,1.187,143,0.259,144,0.958,147,1.001,153,2.033,155,1.221,156,2.033,157,1.265,159,0.036,160,0.036,174,1.364,175,2.698,176,1.576,177,1.576,178,1.576,179,2.129]],["title/coverage.html",[242,2.956]],["body/coverage.html",[0,1.637,1,1.068,7,0.512,8,2.861,29,2.264,54,0.052,57,0.932,58,0.932,59,0.932,94,1.898,130,0.939,133,1.898,135,1.898,143,0.244,147,0.97,152,1.068,155,0.932,159,0.037,160,0.037,161,1.898,163,2.264,164,2.053,174,2.263,180,1.405,181,2.449,184,1.405,185,1.405,188,2.539,225,1.898,231,1.898,232,2.264,242,2.264,243,2.82,244,2.82,245,2.82,246,2.82,247,3.773,248,5.118,249,4.87,250,3.773,251,2.82,252,4.252,253,2.82,254,2.82,255,2.82,256,2.82,257,2.82,258,2.82,259,2.82,260,2.82]],["title/dependencies.html",[261,1.538,262,2.619]],["body/dependencies.html",[54,0.05,159,0.047,160,0.047,262,3.343,263,4.164,264,4.164]],["title/index.html",[75,0.569,265,2.286,266,2.286]],["body/index.html",[0,2.021,1,1.764,2,2.127,12,2.295,31,2.738,34,3.426,41,1.964,54,0.046,56,1.127,138,2.738,139,2.738,152,1.764,157,0.849,159,0.042,160,0.042,261,2.295,267,3.411,268,3.411,269,3.411,270,3.411,271,3.411,272,3.411,273,3.411,274,3.411,275,3.411,276,4.267,277,3.411,278,3.411,279,4.267,280,3.411,281,4.267,282,3.411,283,3.411,284,3.411,285,3.411,286,3.411,287,3.411,288,3.411,289,3.411]],["title/modules.html",[290,2.956]],["body/modules.html",[54,0.047,159,0.047,160,0.047,290,3.394]],["title/overview.html",[291,2.956]],["body/overview.html",[2,2.044,54,0.047,56,1.355,159,0.047,160,0.047,162,1.78,291,3.293,292,4.102,293,4.102,294,4.102]],["title/properties.html",[76,0.938,261,1.538]],["body/properties.html",[54,0.05,76,1.197,159,0.047,160,0.047,295,4.164,296,4.164]],["title/miscellaneous/typealiases.html",[297,1.316,298,3.263]],["body/miscellaneous/typealiases.html",[54,0.046,75,0.991,130,0.991,152,1.509,159,0.046,160,0.046,188,2.681,196,3.198,220,3.198,221,3.198,223,3.198,225,3.155,297,2.294,299,3.984,300,3.984]],["title/miscellaneous/variables.html",[297,1.316,301,2.619]],["body/miscellaneous/variables.html",[1,1.685,8,2.457,15,1.47,23,2.563,54,0.051,74,1.47,75,0.908,82,1.47,83,2.995,87,2.931,130,1.107,133,2.995,134,2.563,135,2.995,136,2.457,159,0.044,160,0.044,297,2.102,301,2.931,302,4.451]]],"invertedIndex":[["",{"_index":54,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":248,"title":{},"body":{"coverage.html":{}}}],["0.0.0",{"_index":296,"title":{},"body":{"properties.html":{}}}],["0.0.2",{"_index":283,"title":{},"body":{"index.html":{}}}],["0.4.1",{"_index":285,"title":{},"body":{"index.html":{}}}],["0/1",{"_index":249,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":252,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":280,"title":{},"body":{"index.html":{}}}],["1.1.1",{"_index":286,"title":{},"body":{"index.html":{}}}],["1/1",{"_index":257,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":251,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":256,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":292,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":264,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":258,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":277,"title":{},"body":{"index.html":{}}}],["4",{"_index":293,"title":{},"body":{"overview.html":{}}}],["4/10",{"_index":254,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":253,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":294,"title":{},"body":{"overview.html":{}}}],["50",{"_index":250,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":246,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":245,"title":{},"body":{"coverage.html":{}}}],["actual_component",{"_index":158,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["alias",{"_index":255,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":299,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular",{"_index":276,"title":{},"body":{"index.html":{}}}],["angular/cdk/testing",{"_index":173,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["angular/common/http",{"_index":126,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["angular/core",{"_index":124,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["angular/platform",{"_index":128,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["async",{"_index":198,"title":{},"body":{"components/Markdown.html":{}}}],["attribute",{"_index":88,"title":{},"body":{"components/Code.html":{}}}],["available",{"_index":64,"title":{},"body":{"components/Code.html":{}}}],["below",{"_index":50,"title":{},"body":{"components/Code.html":{}}}],["block",{"_index":142,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["both",{"_index":136,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"miscellaneous/variables.html":{}}}],["browser",{"_index":129,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["case",{"_index":72,"title":{},"body":{"components/Code.html":{},"classes/MarkdownHarness.html":{}}}],["class",{"_index":143,"title":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["classes",{"_index":162,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{},"overview.html":{}}}],["code",{"_index":1,"title":{"components/Code.html":{}},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"components/Markdown.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["code'},{'name",{"_index":151,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["codeharness",{"_index":161,"title":{"classes/CodeHarness.html":{}},"body":{"classes/CodeHarness.html":{},"coverage.html":{}}}],["common",{"_index":279,"title":{},"body":{"index.html":{}}}],["community",{"_index":289,"title":{},"body":{"index.html":{}}}],["compatible",{"_index":274,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/Code.html":{},"components/Markdown.html":{}},"body":{"components/Code.html":{},"components/Markdown.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":149,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["componentharness",{"_index":182,"title":{},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"components/Markdown.html":{},"index.html":{},"overview.html":{}}}],["computed",{"_index":90,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["const",{"_index":97,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["containing",{"_index":20,"title":{},"body":{"components/Code.html":{}}}],["content",{"_index":41,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"index.html":{}}}],["contentcontainercomponentharness",{"_index":169,"title":{},"body":{"classes/CodeHarness.html":{},"classes/MarkdownHarness.html":{}}}],["coverage",{"_index":242,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["custom",{"_index":35,"title":{},"body":{"components/Code.html":{}}}],["default",{"_index":74,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":84,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{}}}],["dependencies",{"_index":262,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":9,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{}}}],["different",{"_index":43,"title":{},"body":{"components/Code.html":{}}}],["directive",{"_index":147,"title":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["directives",{"_index":56,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"index.html":{},"overview.html":{}}}],["directly",{"_index":16,"title":{},"body":{"components/Code.html":{}}}],["display",{"_index":11,"title":{},"body":{"components/Code.html":{}}}],["displayed",{"_index":21,"title":{},"body":{"components/Code.html":{}}}],["documentation",{"_index":243,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["domsanitizer",{"_index":127,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["element",{"_index":146,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["empty",{"_index":47,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["emptystate",{"_index":59,"title":{"directives/EmptyState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["emptystateharness",{"_index":180,"title":{"classes/EmptyStateHarness.html":{}},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"coverage.html":{}}}],["error",{"_index":46,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["error(error_both",{"_index":96,"title":{},"body":{"components/Code.html":{}}}],["error(error_none",{"_index":95,"title":{},"body":{"components/Code.html":{}}}],["error_both",{"_index":135,"title":{},"body":{"components/Code.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_none",{"_index":133,"title":{},"body":{"components/Code.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errorstate",{"_index":58,"title":{"directives/ErrorState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["errorstateharness",{"_index":184,"title":{"classes/ErrorStateHarness.html":{}},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"coverage.html":{}}}],["example",{"_index":49,"title":{},"body":{"components/Code.html":{}}}],["examples",{"_index":51,"title":{},"body":{"components/Code.html":{}}}],["export",{"_index":144,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["exportas",{"_index":175,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["extends",{"_index":168,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["fetch",{"_index":17,"title":{},"body":{"components/Code.html":{}}}],["fetching",{"_index":62,"title":{},"body":{"components/Code.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["function",{"_index":36,"title":{},"body":{"components/Code.html":{}}}],["gethighlighter",{"_index":131,"title":{},"body":{"components/Code.html":{}}}],["gethighlighter().codetohtml(text",{"_index":101,"title":{},"body":{"components/Code.html":{}}}],["getloaded",{"_index":233,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["getlocal",{"_index":234,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["getting",{"_index":265,"title":{"index.html":{}},"body":{}}],["harness",{"_index":165,"title":{},"body":{"classes/CodeHarness.html":{}}}],["harness.ts",{"_index":164,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{},"coverage.html":{}}}],["harness.ts:12",{"_index":183,"title":{},"body":{"classes/EmptyStateHarness.html":{}}}],["harness.ts:14",{"_index":237,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["harness.ts:4",{"_index":186,"title":{},"body":{"classes/ErrorStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["harness.ts:7",{"_index":172,"title":{},"body":{"classes/CodeHarness.html":{}}}],["harness.ts:8",{"_index":187,"title":{},"body":{"classes/LoadingStateHarness.html":{}}}],["harness.ts:9",{"_index":241,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["highlight",{"_index":222,"title":{},"body":{"components/Markdown.html":{}}}],["highlighter",{"_index":34,"title":{},"body":{"components/Code.html":{},"index.html":{}}}],["highlightercore",{"_index":39,"title":{},"body":{"components/Code.html":{}}}],["highlighting",{"_index":13,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["host",{"_index":66,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["hostselector",{"_index":171,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["html",{"_index":140,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["httpresource",{"_index":125,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["httpresource.text",{"_index":114,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["https://marked.js.org/using_advanced#options",{"_index":224,"title":{},"body":{"components/Markdown.html":{}}}],["https://shiki.style/languages",{"_index":113,"title":{},"body":{"components/Code.html":{}}}],["https://shiki.style/themes",{"_index":122,"title":{},"body":{"components/Code.html":{}}}],["identifier",{"_index":29,"title":{},"body":{"components/Code.html":{},"coverage.html":{}}}],["ignored",{"_index":89,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["implements",{"_index":189,"title":{},"body":{"components/Markdown.html":{}}}],["import",{"_index":53,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["importing",{"_index":52,"title":{},"body":{"components/Code.html":{}}}],["index",{"_index":75,"title":{"index.html":{}},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["inject",{"_index":123,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["inject(domsanitizer",{"_index":116,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["input",{"_index":83,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"miscellaneous/variables.html":{}}}],["input(\"github",{"_index":217,"title":{},"body":{"components/Markdown.html":{}}}],["input(\"javascript",{"_index":111,"title":{},"body":{"components/Code.html":{}}}],["input(\"nord",{"_index":120,"title":{},"body":{"components/Code.html":{}}}],["inputs",{"_index":19,"title":{},"body":{"components/Code.html":{}}}],["instance",{"_index":37,"title":{},"body":{"components/Code.html":{}}}],["interacting",{"_index":166,"title":{},"body":{"classes/CodeHarness.html":{}}}],["lang",{"_index":25,"title":{},"body":{"components/Code.html":{}}}],["language",{"_index":27,"title":{},"body":{"components/Code.html":{}}}],["legend",{"_index":145,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["light",{"_index":218,"title":{},"body":{"components/Markdown.html":{}}}],["loaded",{"_index":236,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["loading",{"_index":45,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["loadingstate",{"_index":57,"title":{"directives/LoadingState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["loadingstateharness",{"_index":185,"title":{"classes/LoadingStateHarness.html":{}},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"coverage.html":{}}}],["local",{"_index":240,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["made",{"_index":288,"title":{},"body":{"index.html":{}}}],["maerked",{"_index":212,"title":{},"body":{"components/Markdown.html":{}}}],["markdown",{"_index":152,"title":{"components/Markdown.html":{}},"body":{"components/Code.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["markdownharness",{"_index":231,"title":{"classes/MarkdownHarness.html":{}},"body":{"classes/MarkdownHarness.html":{},"coverage.html":{}}}],["markdownoptions",{"_index":225,"title":{},"body":{"components/Markdown.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["marked",{"_index":220,"title":{},"body":{"components/Markdown.html":{},"miscellaneous/typealiases.html":{}}}],["marked(highlight(this.theme",{"_index":228,"title":{},"body":{"components/Markdown.html":{}}}],["marked.parse(text",{"_index":229,"title":{},"body":{"components/Markdown.html":{}}}],["markedoptions",{"_index":221,"title":{},"body":{"components/Markdown.html":{},"miscellaneous/typealiases.html":{}}}],["matching",{"_index":160,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["md",{"_index":191,"title":{},"body":{"components/Markdown.html":{},"classes/MarkdownHarness.html":{}}}],["mdcontent",{"_index":226,"title":{},"body":{"components/Markdown.html":{}}}],["metadata",{"_index":65,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["methods",{"_index":197,"title":{},"body":{"components/Markdown.html":{}}}],["micro",{"_index":269,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":297,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":239,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["modules",{"_index":290,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":150,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["nested",{"_index":40,"title":{},"body":{"components/Code.html":{}}}],["new",{"_index":94,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"coverage.html":{}}}],["ng)angular",{"_index":268,"title":{},"body":{"index.html":{}}}],["ngoninit",{"_index":199,"title":{},"body":{"components/Markdown.html":{}}}],["ok",{"_index":156,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["okstate",{"_index":155,"title":{"directives/OkState.html":{}},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["oninit",{"_index":190,"title":{},"body":{"components/Markdown.html":{}}}],["optional",{"_index":119,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["options",{"_index":196,"title":{},"body":{"components/Markdown.html":{},"miscellaneous/typealiases.html":{}}}],["overview",{"_index":291,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":261,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["packages",{"_index":270,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":204,"title":{},"body":{"components/Markdown.html":{}}}],["parse",{"_index":98,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["parse(text",{"_index":202,"title":{},"body":{"components/Markdown.html":{}}}],["parse(this.code",{"_index":106,"title":{},"body":{"components/Code.html":{}}}],["parse(this.res.hasvalue",{"_index":107,"title":{},"body":{"components/Code.html":{}}}],["parser",{"_index":213,"title":{},"body":{"components/Markdown.html":{}}}],["parsing",{"_index":223,"title":{},"body":{"components/Markdown.html":{},"miscellaneous/typealiases.html":{}}}],["private",{"_index":80,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["programming",{"_index":26,"title":{},"body":{"components/Code.html":{}}}],["projected",{"_index":238,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["properties",{"_index":76,"title":{"properties.html":{}},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"properties.html":{}}}],["protected",{"_index":78,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["provide",{"_index":86,"title":{},"body":{"components/Code.html":{}}}],["provided",{"_index":134,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/variables.html":{}}}],["providing",{"_index":61,"title":{},"body":{"components/Code.html":{}}}],["readonly",{"_index":77,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["reference",{"_index":278,"title":{},"body":{"index.html":{}}}],["registry",{"_index":287,"title":{},"body":{"index.html":{}}}],["remote",{"_index":18,"title":{},"body":{"components/Code.html":{}}}],["rendered",{"_index":210,"title":{},"body":{"components/Markdown.html":{}}}],["res",{"_index":79,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["res.error",{"_index":195,"title":{},"body":{"components/Markdown.html":{}}}],["res.hasvalue",{"_index":192,"title":{},"body":{"components/Markdown.html":{}}}],["res.isloading",{"_index":194,"title":{},"body":{"components/Markdown.html":{}}}],["res.status",{"_index":71,"title":{},"body":{"components/Code.html":{}}}],["res.value",{"_index":193,"title":{},"body":{"components/Markdown.html":{}}}],["resolved",{"_index":73,"title":{},"body":{"components/Code.html":{}}}],["results",{"_index":159,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":105,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["returns",{"_index":201,"title":{},"body":{"components/Markdown.html":{}}}],["sanitize",{"_index":81,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["see",{"_index":48,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["selector",{"_index":67,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["set",{"_index":87,"title":{},"body":{"components/Code.html":{},"miscellaneous/variables.html":{}}}],["shiki",{"_index":31,"title":{},"body":{"components/Code.html":{},"index.html":{}}}],["shiki's",{"_index":38,"title":{},"body":{"components/Code.html":{}}}],["simple",{"_index":272,"title":{},"body":{"index.html":{}}}],["smart",{"_index":273,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["src",{"_index":23,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":266,"title":{"index.html":{}},"body":{}}],["state",{"_index":157,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"directives/OkState.html":{},"index.html":{}}}],["state,[xpr",{"_index":153,"title":{},"body":{"components/Code.html":{},"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"components/Markdown.html":{},"directives/OkState.html":{}}}],["state]'},{'name",{"_index":154,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["statements",{"_index":244,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":44,"title":{},"body":{"components/Code.html":{}}}],["static",{"_index":170,"title":{},"body":{"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"classes/MarkdownHarness.html":{}}}],["string",{"_index":15,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/variables.html":{}}}],["style.display",{"_index":141,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["supported",{"_index":30,"title":{},"body":{"components/Code.html":{}}}],["supports",{"_index":42,"title":{},"body":{"components/Code.html":{}}}],["switch",{"_index":70,"title":{},"body":{"components/Code.html":{}}}],["syntax",{"_index":12,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{},"index.html":{}}}],["table",{"_index":260,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":259,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":14,"title":{},"body":{"components/Code.html":{}}}],["template",{"_index":69,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["tests",{"_index":167,"title":{},"body":{"classes/CodeHarness.html":{}}}],["text",{"_index":99,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["theme",{"_index":32,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["this.code",{"_index":91,"title":{},"body":{"components/Code.html":{}}}],["this.content(this.md",{"_index":227,"title":{},"body":{"components/Markdown.html":{}}}],["this.lang",{"_index":102,"title":{},"body":{"components/Code.html":{}}}],["this.locatorforoptional(\".xpr",{"_index":235,"title":{},"body":{"classes/MarkdownHarness.html":{}}}],["this.md",{"_index":205,"title":{},"body":{"components/Markdown.html":{}}}],["this.options",{"_index":230,"title":{},"body":{"components/Markdown.html":{}}}],["this.parse(this.md",{"_index":206,"title":{},"body":{"components/Markdown.html":{}}}],["this.parse(this.res.hasvalue",{"_index":207,"title":{},"body":{"components/Markdown.html":{}}}],["this.res.value",{"_index":108,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["this.sanitize.bypasssecuritytrusthtml",{"_index":100,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["this.src",{"_index":92,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["this.theme",{"_index":103,"title":{},"body":{"components/Code.html":{}}}],["throw",{"_index":93,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["tostring",{"_index":104,"title":{},"body":{"components/Code.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["tslib",{"_index":263,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":130,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":298,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":137,"title":{},"body":{"components/Code.html":{}}}],["unable",{"_index":22,"title":{},"body":{"components/Code.html":{}}}],["url",{"_index":24,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["use",{"_index":33,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["used",{"_index":10,"title":{},"body":{"components/Code.html":{}}}],["using",{"_index":63,"title":{},"body":{"components/Code.html":{}}}],["valid",{"_index":28,"title":{},"body":{"components/Code.html":{}}}],["value",{"_index":82,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":148,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["variable",{"_index":247,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":301,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vendor",{"_index":281,"title":{},"body":{"index.html":{}}}],["version",{"_index":295,"title":{},"body":{"properties.html":{}}}],["very",{"_index":271,"title":{},"body":{"index.html":{}}}],["xp)experimental",{"_index":267,"title":{},"body":{"index.html":{}}}],["xpr",{"_index":68,"title":{},"body":{"components/Code.html":{},"classes/CodeHarness.html":{},"directives/EmptyState.html":{},"classes/EmptyStateHarness.html":{},"directives/ErrorState.html":{},"classes/ErrorStateHarness.html":{},"directives/LoadingState.html":{},"classes/LoadingStateHarness.html":{},"components/Markdown.html":{},"classes/MarkdownHarness.html":{},"directives/OkState.html":{}}}],["xpremptystate",{"_index":176,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["xprerrorstate",{"_index":178,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["xprloadingstate",{"_index":177,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["xprng/.../code.ts",{"_index":302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xprng/.../markdown.ts",{"_index":300,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["xprng/code",{"_index":138,"title":{},"body":{"components/Code.html":{},"index.html":{}}}],["xprng/code\";importing",{"_index":55,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts",{"_index":8,"title":{},"body":{"components/Code.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["xprng/code/src/code.ts:100",{"_index":85,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:107",{"_index":118,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:115",{"_index":112,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:123",{"_index":121,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:129",{"_index":110,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:133",{"_index":109,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:158",{"_index":115,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/src/code.ts:159",{"_index":117,"title":{},"body":{"components/Code.html":{}}}],["xprng/code/testing/code",{"_index":163,"title":{},"body":{"classes/CodeHarness.html":{},"coverage.html":{}}}],["xprng/common",{"_index":139,"title":{},"body":{"components/Code.html":{},"index.html":{}}}],["xprng/common\";directly",{"_index":60,"title":{},"body":{"components/Code.html":{}}}],["xprng/common/src/states.ts",{"_index":174,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{},"coverage.html":{}}}],["xprng/common/testing/state",{"_index":181,"title":{},"body":{"classes/EmptyStateHarness.html":{},"classes/ErrorStateHarness.html":{},"classes/LoadingStateHarness.html":{},"coverage.html":{}}}],["xprng/markdown",{"_index":284,"title":{},"body":{"index.html":{}}}],["xprng/markdown/src/markdown.ts",{"_index":188,"title":{},"body":{"components/Markdown.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["xprng/markdown/src/markdown.ts:47",{"_index":209,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:54",{"_index":216,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:60",{"_index":219,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:66",{"_index":211,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:71",{"_index":208,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:77",{"_index":203,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:84",{"_index":214,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:85",{"_index":215,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/src/markdown.ts:87",{"_index":200,"title":{},"body":{"components/Markdown.html":{}}}],["xprng/markdown/testing/markdown",{"_index":232,"title":{},"body":{"classes/MarkdownHarness.html":{},"coverage.html":{}}}],["xprng/vendor",{"_index":282,"title":{},"body":{"index.html":{}}}],["xprng/vendor/shiki",{"_index":132,"title":{},"body":{"components/Code.html":{},"components/Markdown.html":{}}}],["xprokstate",{"_index":179,"title":{},"body":{"directives/EmptyState.html":{},"directives/ErrorState.html":{},"directives/LoadingState.html":{},"directives/OkState.html":{}}}],["zoneless",{"_index":275,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/Code.html":{"url":"components/Code.html","title":"component - Code","body":"\n                   \n\n\n\n\n\n  Components\n  \n  Code\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    xprng/code/src/code.ts\n\n\n\n    \n        Description\n    \n    \n        Code\nThis component is used to display source code with syntax highlighting.\nIt can either take a string of code directly or fetch it from a remote source.\nInputs\n\ncode: A string containing the source code to be displayed. Unable to be used with src.\nsrc: A URL from which to fetch the source code. Unable to be used with code.\nlang: The programming language of the source code. This should be a valid language identifier supported by Shiki.\ntheme: The theme to use for syntax highlighting. This can be any theme supported by Shiki.\nhighlighter: A custom highlighter function (Should be an instance of Shiki's HighlighterCore).\n\nNested Content\nThe component supports nested content for different states, loading, error, and empty states.\nSee the example below for how to use these states.\nExamples\nImporting the component\nExample :import { Code } from \"@xprng/code\";Importing states directives\nExample :import { LoadingState, ErrorState, EmptyState } from \"@xprng/common\";Directly providing code content\nExample :Fetching code from a remote source\nExample :Using nested content for different states\nExample :\n  Loading...\n  Error loading code.\n  No code available.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                xpr-code\n            \n\n\n\n\n\n            \n                template\n                @if (code()) {\n  \n}\n@if (src()) {\n  @switch (res.status()) {\n    @case (\"error\") {\n      \n    }\n    @case (\"loading\") {\n      \n    }\n    @case (\"resolved\") {\n      \n    }\n    @default {\n      \n    }\n  }\n}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                code\n                            \n                            \n                                    Protected\n                                content\n                            \n                            \n                                    Readonly\n                                highlighter\n                            \n                            \n                                    Readonly\n                                lang\n                            \n                            \n                                    Protected\n                                    Readonly\n                                res\n                            \n                            \n                                    Private\n                                    Readonly\n                                sanitize\n                            \n                            \n                                    Readonly\n                                src\n                            \n                            \n                                    Readonly\n                                theme\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:100\n                        \n                    \n\n            \n                \n                    Source code content as a string\nThis can be used to directly provide source code content.\nIf this is set, the src attribute will be ignored.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => {\n    if (!this.code() && !this.src()) {\n      throw new Error(ERROR_NONE);\n    }\n    if (this.code() && this.src()) {\n      throw new Error(ERROR_BOTH);\n    }\n\n    const parse = (text: string) =>\n      this.sanitize.bypassSecurityTrustHtml(\n        getHighlighter().codeToHtml(text, {\n          lang: this.lang(),\n          theme: this.theme(),\n        }).toString(),\n      );\n\n    if (this.code()) return parse(this.code() ?? \"\");\n\n    if (this.src()) {\n      return parse(this.res.hasValue() ? this.res.value() : \"\");\n    }\n\n    return parse(\"\");\n  })\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        highlighter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:129\n                        \n                    \n\n            \n                \n                    A custom highlighter function (Should be an instance of Shiki's HighlighterCore).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        lang\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(\"javascript\")\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:115\n                        \n                    \n\n            \n                \n                    The programming language of the source code.\nThis should be a valid language identifier supported by Shiki.\nSee https://shiki.style/languages\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        res\n                        \n                    \n                \n            \n                \n                    \n                        Default value : httpResource.text(() => this.src())\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:158\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sanitize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DomSanitizer)\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:159\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        src\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:107\n                        \n                    \n\n            \n                \n                    The source URL of the source code content.\nThis is optional and can be used to fetch source code content from a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        theme\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(\"nord\")\n                    \n                \n                    \n                        \n                                Defined in xprng/code/src/code.ts:123\n                        \n                    \n\n            \n                \n                    The theme to use for syntax highlighting.\nThis can be any theme supported by Shiki.\nSee https://shiki.style/themes\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, computed, inject, input } from \"@angular/core\";\nimport { httpResource } from \"@angular/common/http\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport type { HighlighterCore } from \"shiki\";\nimport { getHighlighter } from \"@xprng/vendor/shiki\";\n\nconst ERROR_NONE =\n  \"Either 'code' or 'src' input must be provided. Neither is set.\";\nconst ERROR_BOTH = \"Either 'code' or 'src' input should be provided, not both.\";\n\n/**\n * # Code\n *\n * This component is used to display source code with syntax highlighting.\n * It can either take a string of code directly or fetch it from a remote source.\n *\n * ## Inputs\n *\n * - `code`: A string containing the source code to be displayed. Unable to be used with `src`.\n * - `src`: A URL from which to fetch the source code. Unable to be used with `code`.\n * - `lang`: The programming language of the source code. This should be a valid language identifier supported by Shiki.\n * - `theme`: The theme to use for syntax highlighting. This can be any theme supported by Shiki.\n * - `highlighter`: A custom highlighter function (Should be an instance of Shiki's `HighlighterCore`).\n *\n * ## Nested Content\n *\n * The component supports nested content for different states, loading, error, and empty states.\n * See the example below for how to use these states.\n *\n * ## Examples\n *\n * ### Importing the component\n *\n * ```typescript\n * import { Code } from \"@xprng/code\";\n * ```\n *\n * ### Importing states directives\n *\n * ```typescript\n * import { LoadingState, ErrorState, EmptyState } from \"@xprng/common\";\n * ```\n *\n * ### Directly providing code content\n *\n * ```html\n * \n * ```\n *\n * ### Fetching code from a remote source\n *\n * ```html\n * \n * ```\n *\n * ### Using nested content for different states\n * ```html\n * \n *   Loading...\n *   Error loading code.\n *   No code available.\n * \n * ```\n */\n@Component({\n  selector: \"xpr-code\",\n  host: {\n    \"[style.display]\": '\"block\"',\n    class: \"xpr-code\",\n  },\n  template: `\n    @if (code()) {\n      \n    }\n    @if (src()) {\n      @switch (res.status()) {\n        @case (\"error\") {\n          \n        }\n        @case (\"loading\") {\n          \n        }\n        @case (\"resolved\") {\n          \n        }\n        @default {\n          \n        }\n      }\n    }\n  `,\n})\nexport class Code {\n  /**\n   * Source code content as a string\n   * This can be used to directly provide source code content.\n   * If this is set, the `src` attribute will be ignored.\n   * @input\n   */\n  readonly code = input();\n\n  /**\n   * The source URL of the source code content.\n   * This is optional and can be used to fetch source code content from a URL.\n   * @input\n   */\n  readonly src = input();\n\n  /**\n   * The programming language of the source code.\n   * This should be a valid language identifier supported by Shiki.\n   * @see https://shiki.style/languages\n   * @input\n   */\n  readonly lang = input(\"javascript\");\n\n  /**\n   * The theme to use for syntax highlighting.\n   * This can be any theme supported by Shiki.\n   * @see https://shiki.style/themes\n   * @input\n   */\n  readonly theme = input(\"nord\");\n\n  /**\n   * A custom highlighter function (Should be an instance of Shiki's `HighlighterCore`).\n   * @input\n   */\n  readonly highlighter = input();\n\n  //\n\n  protected content = computed(() => {\n    if (!this.code() && !this.src()) {\n      throw new Error(ERROR_NONE);\n    }\n    if (this.code() && this.src()) {\n      throw new Error(ERROR_BOTH);\n    }\n\n    const parse = (text: string) =>\n      this.sanitize.bypassSecurityTrustHtml(\n        getHighlighter().codeToHtml(text, {\n          lang: this.lang(),\n          theme: this.theme(),\n        }).toString(),\n      );\n\n    if (this.code()) return parse(this.code() ?? \"\");\n\n    if (this.src()) {\n      return parse(this.res.hasValue() ? this.res.value() : \"\");\n    }\n\n    return parse(\"\");\n  });\n\n  protected readonly res = httpResource.text(() => this.src());\n  private readonly sanitize = inject(DomSanitizer);\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (code()) {  }@if (src()) {  @switch (res.status()) {    @case (\"error\") {          }    @case (\"loading\") {          }    @case (\"resolved\") {          }    @default {          }  }}'\n    var COMPONENTS = [{'name': 'Code', 'selector': 'xpr-code'},{'name': 'Markdown', 'selector': 'xpr-markdown'}];\n    var DIRECTIVES = [{'name': 'EmptyState', 'selector': 'xpr-empty-state,[xpr-empty-state]'},{'name': 'ErrorState', 'selector': 'xpr-error-state,[xpr-error-state]'},{'name': 'LoadingState', 'selector': 'xpr-loading-state,[xpr-loading-state]'},{'name': 'OkState', 'selector': 'xpr-ok-state,[xpr-ok-state]'}];\n    var ACTUAL_COMPONENT = {'name': 'Code'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CodeHarness.html":{"url":"classes/CodeHarness.html","title":"class - CodeHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CodeHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/code/testing/code-harness.ts\n        \n\n\n            \n                Description\n            \n            \n                Harness for interacting with Code components in tests.\n\n            \n\n            \n                Extends\n            \n            \n                        ContentContainerComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-code\"\n                    \n                \n                    \n                        \n                                Defined in xprng/code/testing/code-harness.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ContentContainerComponentHarness } from \"@angular/cdk/testing\";\n\n/**\n * Harness for interacting with `Code` components in tests.\n */\nexport class CodeHarness extends ContentContainerComponentHarness {\n  static hostSelector = \"xpr-code\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/EmptyState.html":{"url":"directives/EmptyState.html","title":"directive - EmptyState","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  EmptyState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/src/states.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        xpr-empty-state,[xpr-empty-state]\n                    \n\n\n\n                    \n                        exportAs\n                        xprEmptyState\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"xpr-loading-state,[xpr-loading-state]\",\n  exportAs: \"xprLoadingState\",\n  host: {\n    class: \"xpr-loading-state\",\n  },\n})\nexport class LoadingState {\n}\n\n@Directive({\n  selector: \"xpr-error-state,[xpr-error-state]\",\n  exportAs: \"xprErrorState\",\n  host: {\n    class: \"xpr-error-state\",\n  },\n})\nexport class ErrorState {\n}\n\n@Directive({\n  selector: \"xpr-ok-state,[xpr-ok-state]\",\n  exportAs: \"xprOkState\",\n  host: {\n    class: \"xpr-ok-state\",\n  },\n})\nexport class OkState {\n}\n\n@Directive({\n  selector: \"xpr-empty-state,[xpr-empty-state]\",\n  exportAs: \"xprEmptyState\",\n  host: {\n    class: \"xpr-empty-state\",\n  },\n})\nexport class EmptyState {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmptyStateHarness.html":{"url":"classes/EmptyStateHarness.html","title":"class - EmptyStateHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmptyStateHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/testing/state-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-empty-state\"\n                    \n                \n                    \n                        \n                                Defined in xprng/common/testing/state-harness.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentHarness } from \"@angular/cdk/testing\";\n\nexport class ErrorStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-error-state\";\n}\n\nexport class LoadingStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-loading-state\";\n}\n\nexport class EmptyStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-empty-state\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ErrorState.html":{"url":"directives/ErrorState.html","title":"directive - ErrorState","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  ErrorState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/src/states.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        xpr-error-state,[xpr-error-state]\n                    \n\n\n\n                    \n                        exportAs\n                        xprErrorState\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"xpr-loading-state,[xpr-loading-state]\",\n  exportAs: \"xprLoadingState\",\n  host: {\n    class: \"xpr-loading-state\",\n  },\n})\nexport class LoadingState {\n}\n\n@Directive({\n  selector: \"xpr-error-state,[xpr-error-state]\",\n  exportAs: \"xprErrorState\",\n  host: {\n    class: \"xpr-error-state\",\n  },\n})\nexport class ErrorState {\n}\n\n@Directive({\n  selector: \"xpr-ok-state,[xpr-ok-state]\",\n  exportAs: \"xprOkState\",\n  host: {\n    class: \"xpr-ok-state\",\n  },\n})\nexport class OkState {\n}\n\n@Directive({\n  selector: \"xpr-empty-state,[xpr-empty-state]\",\n  exportAs: \"xprEmptyState\",\n  host: {\n    class: \"xpr-empty-state\",\n  },\n})\nexport class EmptyState {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorStateHarness.html":{"url":"classes/ErrorStateHarness.html","title":"class - ErrorStateHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorStateHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/testing/state-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-error-state\"\n                    \n                \n                    \n                        \n                                Defined in xprng/common/testing/state-harness.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentHarness } from \"@angular/cdk/testing\";\n\nexport class ErrorStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-error-state\";\n}\n\nexport class LoadingStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-loading-state\";\n}\n\nexport class EmptyStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-empty-state\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/LoadingState.html":{"url":"directives/LoadingState.html","title":"directive - LoadingState","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  LoadingState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/src/states.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        xpr-loading-state,[xpr-loading-state]\n                    \n\n\n\n                    \n                        exportAs\n                        xprLoadingState\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"xpr-loading-state,[xpr-loading-state]\",\n  exportAs: \"xprLoadingState\",\n  host: {\n    class: \"xpr-loading-state\",\n  },\n})\nexport class LoadingState {\n}\n\n@Directive({\n  selector: \"xpr-error-state,[xpr-error-state]\",\n  exportAs: \"xprErrorState\",\n  host: {\n    class: \"xpr-error-state\",\n  },\n})\nexport class ErrorState {\n}\n\n@Directive({\n  selector: \"xpr-ok-state,[xpr-ok-state]\",\n  exportAs: \"xprOkState\",\n  host: {\n    class: \"xpr-ok-state\",\n  },\n})\nexport class OkState {\n}\n\n@Directive({\n  selector: \"xpr-empty-state,[xpr-empty-state]\",\n  exportAs: \"xprEmptyState\",\n  host: {\n    class: \"xpr-empty-state\",\n  },\n})\nexport class EmptyState {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingStateHarness.html":{"url":"classes/LoadingStateHarness.html","title":"class - LoadingStateHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingStateHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/testing/state-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-loading-state\"\n                    \n                \n                    \n                        \n                                Defined in xprng/common/testing/state-harness.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentHarness } from \"@angular/cdk/testing\";\n\nexport class ErrorStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-error-state\";\n}\n\nexport class LoadingStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-loading-state\";\n}\n\nexport class EmptyStateHarness extends ComponentHarness {\n  static hostSelector = \"xpr-empty-state\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Markdown.html":{"url":"components/Markdown.html","title":"component - Markdown","body":"\n                   \n\n\n\n\n\n  Components\n  \n  Markdown\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    xprng/markdown/src/markdown.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                xpr-markdown\n            \n\n\n\n\n\n            \n                template\n                @if (md()) {\n  \n  \n\n} @else if (src()) {\n  \n  @if (res.hasValue() && res.value()) {\n    \n  } @else if (res.isLoading()) {\n    \n  } @else if (res.error()) {\n    \n  } @else {\n    \n  }\n}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                content\n                            \n                            \n                                    Readonly\n                                md\n                            \n                            \n                                    Readonly\n                                options\n                            \n                            \n                                    Protected\n                                    Readonly\n                                res\n                            \n                            \n                                    Private\n                                    Readonly\n                                sanitize\n                            \n                            \n                                    Readonly\n                                src\n                            \n                            \n                                    Readonly\n                                theme\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ngOnInit\n                            \n                            \n                                    Private\n                                parse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in xprng/markdown/src/markdown.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parse\n                        \n                    \n                \n            \n            \n                \n                        \n                    parse(text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in xprng/markdown/src/markdown.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => {\n    return this.md()\n      ? this.parse(this.md()!)\n      : this.parse(this.res.hasValue() ? this.res.value() : \"\");\n  })\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        md\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:47\n                        \n                    \n\n            \n                \n                    The markdown content to be rendered.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input>({})\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:66\n                        \n                    \n\n            \n                \n                    Options for the Maerked parser\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        res\n                        \n                    \n                \n            \n                \n                    \n                        Default value : httpResource.text(() => this.src())\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sanitize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DomSanitizer)\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        src\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:54\n                        \n                    \n\n            \n                \n                    The source URL of the markdown content.\nIf md is provided, this will be ignored.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        theme\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(\"github-light\")\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/src/markdown.ts:60\n                        \n                    \n\n            \n                \n                    The theme to use for syntax highlighting.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, computed, inject, input, OnInit } from \"@angular/core\";\nimport { httpResource } from \"@angular/common/http\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { Marked, type MarkedOptions } from \"marked\";\nimport { highlight } from \"@xprng/vendor/shiki\";\n\n/**\n * Marked options for parsing markdown.\n * @see https://marked.js.org/using_advanced#options\n */\nexport type MarkdownOptions = MarkedOptions;\n\n@Component({\n  selector: \"xpr-markdown\",\n  host: {\n    \"[style.display]\": '\"block\"',\n    class: \"xpr-markdown\",\n  },\n  template: `\n    @if (md()) {\n      \n      \n\n    } @else if (src()) {\n      \n      @if (res.hasValue() && res.value()) {\n        \n      } @else if (res.isLoading()) {\n        \n      } @else if (res.error()) {\n        \n      } @else {\n        \n      }\n    }\n  `,\n})\nexport class Markdown implements OnInit {\n  /**\n   * The markdown content to be rendered.\n   * @input\n   */\n  readonly md = input();\n\n  /**\n   * The source URL of the markdown content.\n   * If `md` is provided, this will be ignored.\n   * @input\n   */\n  readonly src = input();\n\n  /**\n   * The theme to use for syntax highlighting.\n   * @input\n   */\n  readonly theme = input(\"github-light\");\n\n  /**\n   * Options for the Maerked parser\n   * @input\n   */\n  readonly options = input>({});\n\n  //\n\n  // protected mdContent = computed(() => this.content(this.md() ?? \"\"));\n  protected content = computed(() => {\n    return this.md()\n      ? this.parse(this.md()!)\n      : this.parse(this.res.hasValue() ? this.res.value() : \"\");\n  });\n\n  private parse(text: string) {\n    const marked = new Marked(highlight(this.theme()));\n    return this.sanitize.bypassSecurityTrustHtml(\n      marked.parse(text, this.options()) as string,\n    );\n  }\n\n  protected readonly res = httpResource.text(() => this.src());\n  private readonly sanitize = inject(DomSanitizer);\n\n  async ngOnInit() {\n    if (!this.md() && !this.src()) {\n      throw new Error(\n        \"Either 'md' or 'src' input must be provided. Neither provided.\",\n      );\n    }\n    if (this.md() && this.src()) {\n      throw new Error(\n        \"Either 'md' or 'src' input must be provided. Both provided.\",\n      );\n    }\n  }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (md()) {    } @else if (src()) {    @if (res.hasValue() && res.value()) {      } @else if (res.isLoading()) {      } @else if (res.error()) {      } @else {      }}'\n    var COMPONENTS = [{'name': 'Code', 'selector': 'xpr-code'},{'name': 'Markdown', 'selector': 'xpr-markdown'}];\n    var DIRECTIVES = [{'name': 'EmptyState', 'selector': 'xpr-empty-state,[xpr-empty-state]'},{'name': 'ErrorState', 'selector': 'xpr-error-state,[xpr-error-state]'},{'name': 'LoadingState', 'selector': 'xpr-loading-state,[xpr-loading-state]'},{'name': 'OkState', 'selector': 'xpr-ok-state,[xpr-ok-state]'}];\n    var ACTUAL_COMPONENT = {'name': 'Markdown'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MarkdownHarness.html":{"url":"classes/MarkdownHarness.html","title":"class - MarkdownHarness","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MarkdownHarness\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/markdown/testing/markdown-harness.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ContentContainerComponentHarness\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getLoaded\n                            \n                            \n                                getLocal\n                            \n                            \n                                    Static\n                                hostSelector\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        getLoaded\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.locatorForOptional(\".xpr-loaded\")\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/testing/markdown-harness.ts:14\n                        \n                    \n\n            \n                \n                    The content projected in case of \"src\" provided mode.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLocal\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.locatorForOptional(\".xpr-local\")\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/testing/markdown-harness.ts:9\n                        \n                    \n\n            \n                \n                    The content projected in case of \"md\" provided mode.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hostSelector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"xpr-markdown\"\n                    \n                \n                    \n                        \n                                Defined in xprng/markdown/testing/markdown-harness.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ContentContainerComponentHarness } from \"@angular/cdk/testing\";\n\nexport class MarkdownHarness extends ContentContainerComponentHarness {\n  static hostSelector = \"xpr-markdown\";\n\n  /**\n   * The content projected in case of \"md\" provided mode.\n   */\n  getLocal = this.locatorForOptional(\".xpr-local\");\n\n  /**\n   * The content projected in case of \"src\" provided mode.\n   */\n  getLoaded = this.locatorForOptional(\".xpr-loaded\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/OkState.html":{"url":"directives/OkState.html","title":"directive - OkState","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  OkState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            xprng/common/src/states.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        xpr-ok-state,[xpr-ok-state]\n                    \n\n\n\n                    \n                        exportAs\n                        xprOkState\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"xpr-loading-state,[xpr-loading-state]\",\n  exportAs: \"xprLoadingState\",\n  host: {\n    class: \"xpr-loading-state\",\n  },\n})\nexport class LoadingState {\n}\n\n@Directive({\n  selector: \"xpr-error-state,[xpr-error-state]\",\n  exportAs: \"xprErrorState\",\n  host: {\n    class: \"xpr-error-state\",\n  },\n})\nexport class ErrorState {\n}\n\n@Directive({\n  selector: \"xpr-ok-state,[xpr-ok-state]\",\n  exportAs: \"xprOkState\",\n  host: {\n    class: \"xpr-ok-state\",\n  },\n})\nexport class OkState {\n}\n\n@Directive({\n  selector: \"xpr-empty-state,[xpr-empty-state]\",\n  exportAs: \"xprEmptyState\",\n  host: {\n    class: \"xpr-empty-state\",\n  },\n})\nexport class EmptyState {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                xprng/code/src/code.ts\n            \n            component\n            Code\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                        xprng/code/src/code.ts\n            \n            variable\n            ERROR_BOTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        xprng/code/src/code.ts\n            \n            variable\n            ERROR_NONE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/code/testing/code-harness.ts\n            \n            class\n            CodeHarness\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                xprng/common/src/states.ts\n            \n            directive\n            EmptyState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/common/src/states.ts\n            \n            directive\n            ErrorState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/common/src/states.ts\n            \n            directive\n            LoadingState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/common/src/states.ts\n            \n            directive\n            OkState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                xprng/common/testing/state-harness.ts\n            \n            class\n            EmptyStateHarness\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                xprng/common/testing/state-harness.ts\n            \n            class\n            ErrorStateHarness\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                xprng/common/testing/state-harness.ts\n            \n            class\n            LoadingStateHarness\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                xprng/markdown/src/markdown.ts\n            \n            component\n            Markdown\n            \n                40 %\n                (4/10)\n            \n        \n        \n            \n                \n                        xprng/markdown/src/markdown.ts\n            \n            type alias\n            MarkdownOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                xprng/markdown/testing/markdown-harness.ts\n            \n            class\n            MarkdownHarness\n            \n                50 %\n                (2/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n(XP)Experimental (NG)Angular Components\nMicro packages of very simple, yet, smart components.\n\nCompatible with Zoneless Angular 20+.\n\n\n\nComponent\nPackage\nReference\n\n\n\n\nCommon\n@xprng/common\n1.0.0\n\n\nVendor\n@xprng/vendor\n0.0.2\n\n\nMarkdown\n@xprng/markdown\n0.4.1\n\n\nCode\n@xprng/code\n1.1.1\n\n\n\nContent\n\nCommon\nState directives\n\n\nVendor\nShiki syntax highlighter registry\n\n\nMarkdown\nMarkdown component\n\n\nCode\nCode highlighter component\n\n\n\n\nMade with ❤️ for the Angular community.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MarkdownOptions   (xprng/.../markdown.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    xprng/markdown/src/markdown.ts\n    \n    \n        \n            \n                \n                    \n                    MarkdownOptions\n                \n            \n            \n                \n                    Marked options for parsing markdown.\n\n                \n            \n            \n                \n                        MarkedOptions\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ERROR_BOTH   (xprng/.../code.ts)\n                        \n                        \n                            ERROR_NONE   (xprng/.../code.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    xprng/code/src/code.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ERROR_BOTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Either 'code' or 'src' input should be provided, not both.\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_NONE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Either 'code' or 'src' input must be provided. Neither is set.\"\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
